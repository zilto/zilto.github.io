{
    "version": "https://jsonfeed.org/version/1",
    "title": "MoreIsMore",
    "home_page_url": "https://tjean.me/blog",
    "description": "MoreIsMore blog feed by Thierry Jean.",
    "items": [
        {
            "id": "https://tjean.me/blog/rag",
            "content_html": "<p>Off-the-shelf LLMs are excellent at manipulating and generating text, but they only know general facts about the world and probably very little about your use case. Retrieval augmented generation (RAG) refers not to a single algorithm, but rather a broad approach to provide relevant context to an LLM. As industry applications mature, RAG strategies will be tailored case-by-case to optimize relevance, business outcomes, and operational concerns.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-69d8bcd6fcc2be80b633fc87e3772d5b.png\" width=\"1456\" height=\"1115\" class=\"img_ev3q\"></p>\n<blockquote>\n<p>crosspost from <a href=\"https://blog.dagworks.io/p/retrieval-augmented-generation-reference-arch\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.dagworks.io/p/retrieval-augmented-generation-reference-arch</a></p>\n</blockquote>\n<p>In this post, we provide a reference RAG architecture and discuss design decisions for each component. It’s ready for use, and will scale with your needs. Specifically, we’ll cover how to:</p>\n<ul>\n<li>Write ingestion and retrieval dataflows using <a href=\"https://hamilton.dagworks.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton</a></li>\n<li>Build a backend with <a href=\"https://fastapi.tiangolo.com/\" target=\"_blank\" rel=\"noopener noreferrer\">FastAPI</a> + Hamilton backend</li>\n<li>Create a browser interface with <a href=\"https://docs.streamlit.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Streamlit</a></li>\n<li>Compute embeddings and generate text with the <a href=\"https://platform.openai.com/docs/api-reference/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAI API</a></li>\n<li>Use and manage a <a href=\"https://weaviate.io/developers/weaviate\" target=\"_blank\" rel=\"noopener noreferrer\">Weaviate</a> vector store</li>\n<li>Build a containerized app using <a href=\"https://docs.docker.com/reference/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker</a></li>\n</ul>\n<blockquote>\n<p>Find the code on <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/LLM_Workflows/retrieval_augmented_generation\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\nThis publication extends our previous <a href=\"https://blog.dagworks.io/p/containerized-pdf-summarizer-with\" target=\"_blank\" rel=\"noopener noreferrer\">PDF Summarizer</a></p>\n</blockquote>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"what-is-rag-and-why-do-you-need-it\">What is RAG and why do you need it?<a href=\"https://tjean.me/blog/rag#what-is-rag-and-why-do-you-need-it\" class=\"hash-link\" aria-label=\"Direct link to What is RAG and why do you need it?\" title=\"Direct link to What is RAG and why do you need it?\">​</a></h2>\n<p>Large language models (LLMs) learn to write coherent sentences by being exposed to enormous corpora of texts. In the process, the model stores facts about the world. However, determining what it knows or what it doesn’t is still a key theoretical challenge. The above generally describes <em>pre-trained</em>, <em>foundational</em> or <em>base</em> models, which are models not yet refined for a particular use-case (see model card of <a href=\"https://huggingface.co/bert-base-uncased\" target=\"_blank\" rel=\"noopener noreferrer\">bert-base-uncased</a> for details). For instance, GPT stands for <em>generative pre-trained transformer</em>, and ChatGPT is a fine-tuned version for chat applications.</p>\n<p>A primary concern for LLM applications, outside of creative work, is the factual correctness of answers. This challenge can be mitigated by adopting one or many of the following techniques:</p>\n<ul>\n<li>\n<p><strong>Fine-tuning</strong> consists of further training a pre-trained model on curated examples for a specific task. The model learns domain-specific language and facts*, which improves the quality of embeddings and text generation relative to the domain (e.g., insurance, health).</p>\n</li>\n<li>\n<p><strong>Instruction-tuning</strong> is a form of fine-tuning that uses instruction-answer pairs. The model learns <em>how</em> to respond to queries (summarize, make a list, think step by step, etc.). Models labeled as <em>chat</em> (e.g., <a href=\"https://huggingface.co/meta-llama/Llama-2-7b-chat\" target=\"_blank\" rel=\"noopener noreferrer\">llama-2-7b-chat</a>) are great for general human interaction, and can be further fine-tuned to your domain.</p>\n</li>\n<li>\n<p><strong>Retrieval augmented generation (RAG)</strong> is a multistep process to retrieve information relevant for a query, and pass it to the LLM as context to generate an answer. RAG is the most flexible approach for adding and updating knowledge since it only requires to change the available sources (e.g., files, internet pages) rather than updating the LLM.</p>\n</li>\n</ul>\n<p>Looking forward, retrieval will continue to be a key architectural component of LLM applications because editing LLM knowledge directly is an unsolved problem. Fine-tuning, in most cases, should be a later concern since it would also improve your RAG strategy if you have one in place. Furthermore, the LLM is the most likely component to be improved upon and replaced, requiring fine-tuning again. For these reasons, we suggest starting with an off-the-shelf LLM and implementing your own RAG system as a first step to improve the knowledge your LLM operates over.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"introducing-hamilton\">Introducing Hamilton<a href=\"https://tjean.me/blog/rag#introducing-hamilton\" class=\"hash-link\" aria-label=\"Direct link to Introducing Hamilton\" title=\"Direct link to Introducing Hamilton\">​</a></h2>\n<p><a href=\"https://hamilton.dagworks.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton</a> is a declarative micro-framework to describe <a href=\"https://en.wikipedia.org/wiki/Dataflow\" target=\"_blank\" rel=\"noopener noreferrer\">dataflows</a> in Python. Its strength is expressing the flow of data and computation in a straightforward and easy to maintain manner (much like dbt does for SQL). It has minimal dependencies and can run anywhere Python runs, meaning the same code will work in development notebooks, scripts, Spark clusters, or production web-services. Hamilton is not a new framework (3.5+ years old), and has been used for years in production modeling data &amp; machine learning dataflows; and it extends nicely to modeling LLM workflows!</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-1-7516bf8851da2dedbffb09aebb4067a0.png\" width=\"1037\" height=\"682\" class=\"img_ev3q\"></p>\n<p>The picture above encapsulates the function-centric declarative approach of Hamilton. The function’s name is tied to its outputs and its arguments define what data it depends on. This allows Hamilton to read functions found in a module and automatically generate the DAG to be executed. This paradigm incentivizes developers to write small modular functions instead of scripts or larger functions, without sacrificing iteration speed.</p>\n<p>As a result, it is easier to:</p>\n<ul>\n<li>Write and maintain custom application logic</li>\n<li>View operation lineage and debug results</li>\n<li>Update components of your stack</li>\n<li>Reuse function implementations across contexts (e.g., notebook, pipeline, web service)</li>\n</ul>\n<blockquote>\n<p>If you are new to Hamilton, feel free to visit our interactive browser demo at\n<a href=\"https://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.tryhamilton.dev/</a></p>\n</blockquote>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"building-a-modular-rag-application\">Building a modular RAG application<a href=\"https://tjean.me/blog/rag#building-a-modular-rag-application\" class=\"hash-link\" aria-label=\"Direct link to Building a modular RAG application\" title=\"Direct link to Building a modular RAG application\">​</a></h2>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-2-f3315f9fb72a623c8af50b067c4f2bdf.png\" width=\"981\" height=\"671\" class=\"img_ev3q\"></p>\n<p>Our example RAG application allows users to import PDF files, extract and store the text chunks, and query the system. These different operations are implemented as dataflows with Hamilton and are exposed via FastAPI endpoints. The backend communicates with OpenAI to embed documents and generate answers, and uses a local Weaviate vector store instance to store and retrieve documents. The frontend is built with Streamlit and exposes the different functionalities via a simple web user interface (UI). Everything is packaged as containers with <code>docker compose</code>, so you can run it anywhere Docker runs.</p>\n<blockquote>\n<p>Find the example on <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/LLM_Workflows/retrieval_augmented_generation\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></p>\n</blockquote>\n<p>Let’s walk through its structure:</p>\n<div class=\"language-title=&quot;Directory language-title=&quot;directory codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-title=&quot;directory codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── README.md</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── .env</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── build_app.sh</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── docker-compose.yaml</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── backend</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── Dockerfile</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── requirements.txt</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── __init__.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── ingestion.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── retrieval.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── server.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── vector_db.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   └── docs</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│       ├── documents.png</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│       ├── rag_summary.png</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│       ├── store_arxiv.png</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│       └── store_pdfs.png</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">└── frontend</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ├── Dockerfile</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ├── requirements.txt</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ├── assets</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    │   └── hamilton_logo.png</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ├── __init__.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ├── client.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ├── Information.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    └── pages</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        ├── 1_Ingestion.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        └── 2_Retrieval.py</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>The repository is divided between the backend and the frontend, each with their own <code>Dockerfile</code> and <code>requirements.txt</code>. The backend has <code>server.py</code> which defines the FastAPI endpoints, and several <code>.py</code> files containing the Hamilton functions for the RAG workflow that interact with the vector store. You can think of each of these modules analogous to “chains” you’d find in Langchain. The frontend has <code>client.py</code> which handles <code>HTTP</code> requests to the backend and a <a href=\"https://docs.streamlit.io/library/get-started/multipage-apps/create-a-multipage-app\" target=\"_blank\" rel=\"noopener noreferrer\">multipage Streamlit app</a> using <code>Information.py</code>, <code>pages/1_Ingestion.py</code>, and <code>pages/2_Retrieval.py</code>.  The file <code>Introduction.py</code> is the app entrypoint and landing page (it’s not the clearest file name, but it defines how the page will be displayed within the Streamlit UI).</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"hamilton-dataflows-aka-chains\">Hamilton dataflows a.k.a. “chains”<a href=\"https://tjean.me/blog/rag#hamilton-dataflows-aka-chains\" class=\"hash-link\" aria-label=\"Direct link to Hamilton dataflows a.k.a. “chains”\" title=\"Direct link to Hamilton dataflows a.k.a. “chains”\">​</a></h2>\n<p>A RAG application can be divided into 3 main steps: ingestion, retrieval, and generation. Importantly, the ingestion step can be done at any time (e.g., continuously, periodically in batch, event-driven) while retrieval and generation always happen together in our case, i.e., when a user makes a query. For this reason, we implemented ingestion in <code>ingestion.py</code> and retrieval + generation in <code>retrieval.py</code>. This way, it would be trivial to reuse our Hamilton ingestion code in a macro-orchestrated pipeline for daily updates of, for example, any newly stored documents; see how to use Hamilton with <a href=\"https://tjean.me/2023-06-28-airflow-hamilton\">Airflow</a>, <a href=\"https://tjean.me/2023-07-25-prefect-hamilton\">Prefect</a> for ideas on how that would work.</p>\n<p>Also, you’ll notice a separate <code>vector_db.py</code> which implements a small set of functionalities to interact with Weaviate. These functions are quite simple, but it allows us to integrate our vector store operations to the broader dataflow, have granular visibility over operations, and handle exceptions. It also enables use to replace Weaviate easily if we wanted to choose another vector store. See <a href=\"https://tjean.me/2023-07-11-modular-llm\">our modular LLM stack post</a> for more details on how to do that.</p>\n<blockquote>\n<p>Below we’ll discuss our dataflow design decisions, for a more hands-on explanation of Hamilton, see our <a href=\"https://tjean.me/2023-08-18-pdf-summarizer\">PDF Summarizer example</a>.</p>\n</blockquote>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"ingestion-flow\">Ingestion flow<a href=\"https://tjean.me/blog/rag#ingestion-flow\" class=\"hash-link\" aria-label=\"Direct link to Ingestion flow\" title=\"Direct link to Ingestion flow\">​</a></h3>\n<p>The ingestion flow allows users to upload arbitrary PDF documents, extract text content, chunk it, get embeddings from OpenAI, and store text chunks with their embedding in Weaviate. To make this demo more engaging, we added functionalities to directly search <a href=\"https://arxiv.org/\" target=\"_blank\" rel=\"noopener noreferrer\">arxiv.org</a> and store the selected scientific articles.</p>\n<p>Below is the DAG for <code>ingestion.py</code>\n<img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-3-de79033c13d93f574841d88b5155715d.png\" width=\"1118\" height=\"1349\" class=\"img_ev3q\"></p>\n<p>Nodes with dotted outlines and the <code>Input:</code> prefix are external to the <code>ingestion.py</code> module and need to be provided to the <code>Hamilton Driver</code> as inputs at execution time. Doubled lines and the different arrow types describe <a href=\"https://hamilton.dagworks.io/en/latest/concepts/hamilton-function-structure/#dynamic-dags\" target=\"_blank\" rel=\"noopener noreferrer\">parallelizable code paths</a>, which can be used to improve processing performance. Towards the bottom, <code>pdf_collection</code> collects all the chunks and stores them in a single <a href=\"https://weaviate.io/developers/weaviate/tutorials/schema\" target=\"_blank\" rel=\"noopener noreferrer\">structured object in Weaviate</a>.</p>\n<p>Notice the path <code>local_pdfs</code> (near the center of the image) is part of; everything above is arXiv specific, and below is generic. This design decision allows us to reuse the same logic to store  PDFs from arXiv as any other PDF. As our application grows, we could store the arxiv functions in a separate <code>arxiv.py</code> module, and add code upstream of <code>local_pdfs</code> to load files from other sources. For example, you can visually imagine “cutting” the above diagram at <code>local_pdfs</code>, and then swapping in a different “implementation”, i.e. dataflow.</p>\n<p>Also, we don’t do any sophisticated text processing, but we could easily add more functions between <code>raw_text</code> and <code>chunked_text</code>. By removing irrelevant text from PDFs (e.g., article references, markdown tables), we could reduce the amount of tokens to process, send to OpenAI, and to then store in our vector store. Adopting a smart processing strategy will both improve the quality of retrieval and lead to performance and cost optimization at scale.</p>\n<p>Changes to the ingestion dataflow (e.g., preprocessing, chunking, embedding model) should generally be followed by reprocessing all documents and recomputing embeddings. Visualizing downstream dependencies of changes is helpful to prevent breaking changes. For example, changing the embedding model will make stored documents incompatible by changing the notion of distance for retrieval and possibly having incompatible vector dimensions. Using the <a href=\"https://weaviate.io/developers/weaviate/configuration/backups\" target=\"_blank\" rel=\"noopener noreferrer\">Weaviate backup features</a> can make rollbacks easier and prevent having to re-compute embeddings and summaries, saving dollars and headaches.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"retrieval-flow\">Retrieval flow<a href=\"https://tjean.me/blog/rag#retrieval-flow\" class=\"hash-link\" aria-label=\"Direct link to Retrieval flow\" title=\"Direct link to Retrieval flow\">​</a></h3>\n<p>The retrieval flow can appear complicated at first, but essentially it starts by getting the text embedding for the user query and doing a <a href=\"https://weaviate.io/developers/academy/zero_to_mvp/queries_2/hybrid\" target=\"_blank\" rel=\"noopener noreferrer\">hybrid search</a> in Weaviate to find the most relevant stored chunks. For each chunk, it checks if a text summary was already generated; if not, the chunk is passed with a prompt to OpenAI’s chat model to generate a summary. The generated summaries of all chunks are collected and sorted according to the original Weaviate relevance ranking, to then be sent again to OpenAI to “reduce” summaries, i.e., make a summary of summary.</p>\n<p>Here is the DAG for retrieval.py\n<img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-4-af39b77cbdec1eb458868cd45e206917.png\" width=\"1456\" height=\"768\" class=\"img_ev3q\"></p>\n<p>A key decision was to specify prompt templates as function nodes (e.g., <code>prompt_to_summarize_chunk</code>, <code>prompt_to_reduce_summaries</code>) and not inputs (dotted outline). These prompt functions receive relevant context (e.g., text chunk), adds it to an f-string, and returns the formatted string. By storing them directly with the dataflow code, assessing behavior, versioning and debugging become much easier. We go into greater detail on how to manage prompts in <a href=\"https://blog.dagworks.io/p/llmops-production-prompt-engineering\" target=\"_blank\" rel=\"noopener noreferrer\">LLMOps: Production prompt engineering patterns with Hamilton</a>.</p>\n<p>As shown in the figure, the <code>rag_query</code> from the user only affects the initial chunk vector search and the <code>rag_summary</code> step which makes a “summary of summaries”. Accordingly, the function to summarize a chunk <code>chunk_with_new_summary</code> doesn’t depend on the user’s input allowing us to generate “generic” summaries for each chunk. This approach has the benefits of making chunk summaries reusable which can largely decrease cost and reduce latency. The downside is that the chunk summaries are less specific to the query and might decrease answer quality.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"weaviate-vector-database\">Weaviate vector database<a href=\"https://tjean.me/blog/rag#weaviate-vector-database\" class=\"hash-link\" aria-label=\"Direct link to Weaviate vector database\" title=\"Direct link to Weaviate vector database\">​</a></h3>\n<p><a href=\"https://weaviate.io/developers/weaviate\" target=\"_blank\" rel=\"noopener noreferrer\">Weaviate</a> offers a specialized type of infrastructure to efficiently store and compare text embeddings (i.e., vectors) at scale. In the context of RAG, the LLM represents the semantic of chunks of text as vectors, and the vector database defines the notion of similarity or relevance. Vector databases come in <a href=\"https://towardsdatascience.com/milvus-pinecone-vespa-weaviate-vald-gsi-what-unites-these-buzz-words-and-what-makes-each-9c65a3bd0696\" target=\"_blank\" rel=\"noopener noreferrer\">various forms</a>, but we decided to use Weaviate for a few reasons:</p>\n<ul>\n<li>\n<p><strong>Classes and structured objects</strong>. For each PDF, we create a <code>Document</code> object and <code>Chunk</code> objects and link them together with their respective properties <code>containsChunk</code> and <code>fromDocument</code>. With structured objects, we can retrieve a <code>Document</code> based on the relevance score of its <code>Chunks</code>; for example, by computing the <code>groupby sum</code> of the relevance of its chunks.</p>\n</li>\n<li>\n<p><strong>Vectors and data in one place</strong>. Weaviate allows you to store the text along the vectors while other vector infrastructure only handle vectors. The latter requires managing and syncing a separate storage for documents which complexifies both ingestion and retrieval. Many data types are supported (e.g., strings, numbers, boolean, dates); we even store the full PDF of each <code>Document</code> as a <code>base64</code> blob.</p>\n</li>\n<li>\n<p><strong>Expressive retrieval</strong>. Weaviate has a REST API for bulk operations and a GraphQL API for object retrieval. While learning GraphQL can be daunting, using it from the Python SDK is easy to approach (see example below). Additionally, many modes of retrieval are offered (vector, multimodal, keyword, etc.). For this RAG example, we used the <a href=\"https://weaviate.io/developers/weaviate/search/hybrid\" target=\"_blank\" rel=\"noopener noreferrer\">hybrid search</a>, which combines vector and keyword search.</p>\n</li>\n</ul>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">Weaviate GraphQL query</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">response </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    weaviate_client</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">query</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">get</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token string\" style=\"color:#e3116c\">\"Chunk\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># Class</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># Properties to retrieve</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token string\" style=\"color:#e3116c\">\"chunk_index\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token string\" style=\"color:#e3116c\">\"content\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token string\" style=\"color:#e3116c\">\"summary\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token string\" style=\"color:#e3116c\">\"fromDocument {... on Document {_additional{id}}}\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># Property of linked object</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">with_hybrid</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># hybrid search parameters</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        query</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">rag_query</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># user text query</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        properties</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"content\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># properties of `Chunk` to search on (specified above)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        vector</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">query_embedding</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># user query embedding/vector</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        alpha</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">hybrid_search_alpha</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># hybrid search parameter</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">with_additional</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"score\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># compute relevance score</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">with_limit</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">retrieve_top_k</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># return top k objects</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">do</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"fastapi-server\">FastAPI server<a href=\"https://tjean.me/blog/rag#fastapi-server\" class=\"hash-link\" aria-label=\"Direct link to FastAPI server\" title=\"Direct link to FastAPI server\">​</a></h3>\n<p><a href=\"https://fastapi.tiangolo.com/\" target=\"_blank\" rel=\"noopener noreferrer\">FastAPI</a> is used to define the server endpoints: <code>/store_arxiv</code>, <code>/store_pdfs</code>, <code>/rag_summary</code>, <code>/documents</code>, but for all of them, the code executed is actually handled by Hamilton. At startup, the server instantiates a <code>Hamilton Driver</code> with all the necessary Python modules (see <a href=\"https://fastapi.tiangolo.com/advanced/events/\" target=\"_blank\" rel=\"noopener noreferrer\">FastAPI Lifespan Events</a>). Then, the function body of FastAPI endpoint consists of accessing the global <code>Hamilton Driver</code>, calling <code>Driver.execute()</code> with the necessary variables, and returning a formatted response. Using Hamilton guarantees that the code powering your web service will run identically to your development notebooks or orchestrated pipelines.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">FastAPI server snippet</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> contextlib </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> asynccontextmanager</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> dataclasses </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> dataclass</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> fastapi</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> pydantic</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">responses </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> JSONResponse</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> hamilton </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> driver</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># define a global dataclass that is shared across endpoints</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@dataclass</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">class</span><span class=\"token plain\"> </span><span class=\"token class-name\">GlobalContext</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    vector_db_url</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    hamilton_driver</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Driver</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@asynccontextmanager</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">async</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">lifespan</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">app</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FastAPI</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">None</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Startup and shutdown logic of the FastAPI app</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    Above yield statement is at startup and below at shutdown</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    Import the Hamilton modules and instantiate the Hamilton driver</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    \"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># import the Python modules containing your dataflows</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> ingestion</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> retrieval</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> vector_db</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    driver_config </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dr </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Builder</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">enable_dynamic_execution</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">allow_experimental_mode</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token boolean\" style=\"color:#36acaa\">True</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># to allow Parallelizable/Collect</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">with_config</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">driver_config</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">with_modules</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">ingestion</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> retrieval</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> vector_db</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># pass our dataflows</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">build</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># make the variable global to reuse it within endpoints</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">global</span><span class=\"token plain\"> global_context</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    global_context </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> GlobalContext</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">vector_db_url</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"http://weaviate_storage:8083\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> hamilton_driver</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">dr</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># execute Hamilton code to make sure the Weaviate class schemas is instantiated</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    global_context</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">hamilton_driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">execute</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"initialize_weaviate_instance\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> inputs</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">vector_db_url</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">global_context</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">vector_db_url</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># anything above yield is executed at startup</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">yield</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># anything below yield is executed at teardown</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># instantiate the FastAPI app</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">app </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FastAPI</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    title</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"Retrieval Augmented Generation with Hamilton\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    lifespan</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">lifespan</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># pass the lifespan context</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># define a POST endpoint</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@app</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">post</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"/store_arxiv\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> tags</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"Ingestion\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">async</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">store_arxiv</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">arxiv_ids</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Form</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> JSONResponse</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Retrieve PDF files of arxiv articles for arxiv_ids\\n</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    Read the PDF as text, create chunks, and embed them using OpenAI API\\n</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    Store chunks with embeddings in Weaviate.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    \"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    global_context</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">hamilton_driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">execute</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"store_documents\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        inputs</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            arxiv_ids</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">arxiv_ids</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            embedding_model_name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"text-embedding-ada-002\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            data_dir</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"./data\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            vector_db_url</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">global_context</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">vector_db_url</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> JSONResponse</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">content</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">stored_arxiv_ids</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">arxiv_ids</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>The snippet also shows that we execute the <code>Hamilton Driver</code> with <code>“initialize_weaviate_instance”</code> at startup to ensure the Weaviate schema exists and the vector store is available. Hamilton helps with keeping the endpoint functions brief and brings a nice separation of concerns. For example, if an error occurred, you can reproduce by using the logged request with Hamilton outside of FastAPI. If it succeeds, then the problem is likely related to the service and not the dataflow itself. We’ll discuss unit testing and integration testing in a future post, make sure to <a href=\"https://blog.dagworks.io/subscribe\" target=\"_blank\" rel=\"noopener noreferrer\">subscribe</a> to be notified!</p>\n<p>A core feature of Hamilton is the automatically generated DAG visualization, which complements FastAPI's automated <a href=\"https://fastapi.tiangolo.com/tutorial/metadata/\" target=\"_blank\" rel=\"noopener noreferrer\">Swagger UI documentation</a>. When running the example code, visit <a href=\"http://localhost:8082/docs\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8082/docs</a> to explore it yourself! FastAPI allows you to <a href=\"https://fastapi.tiangolo.com/tutorial/schema-extra-example/\" target=\"_blank\" rel=\"noopener noreferrer\">add request examples</a> to your code, which helps users learn your API and your team move faster as you develop and test things.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-5-b51113d9f008e4d16e3d42d5da66e5cf.png\" width=\"957\" height=\"1194\" class=\"img_ev3q\"></p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"streamlit-frontend\">Streamlit frontend<a href=\"https://tjean.me/blog/rag#streamlit-frontend\" class=\"hash-link\" aria-label=\"Direct link to Streamlit frontend\" title=\"Direct link to Streamlit frontend\">​</a></h3>\n<p><a href=\"https://docs.streamlit.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Streamlit</a> allows you to build a user interface quickly using Python. Again, with the goal of modularity, we decided to build a <a href=\"https://docs.streamlit.io/library/get-started/multipage-apps/create-a-multipage-app\" target=\"_blank\" rel=\"noopener noreferrer\">multipage Streamlit app</a> with independent pages for information, ingestion, and retrieval. The file <code>client.py</code> defines the HTTP requests to interact with the server, which helps errors related to the client-server communication from those associated with the UI. An important consideration when using Streamlit is that the entire code is executed whenever a page is refreshed, so avoid having operations that are computationally intensive or incur costs (e.g., LLM API calls).</p>\n<p>The design of your search UI is a significant decision as it will largely <a href=\"https://www.algolia.com/blog/ux/7-examples-of-great-site-search-ui/\" target=\"_blank\" rel=\"noopener noreferrer\">influence how people use your application</a>. For the ingestion page, we made sure to display the currently stored documents and provide feedback via a “spinner” widget during long ingestion operations. For the retrieval page, we exposed hybrid search parameters such as alpha and top k with informational tooltips to allow users to play around, but kept hidden the prompts used to summarize documents. After making a RAG query, the app will display the query, the answer, and the source chunks with their summary to allow you to reason over the answer. After more than one query, a slider will allow you to browse through your history of searches and compare answers to different queries. Semantic search has enabled news ways to retrieve information across documents, but finding the ideal UI for it remains an unsolved problem and we encourage you to iterate over it!</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"docker-services\">Docker services<a href=\"https://tjean.me/blog/rag#docker-services\" class=\"hash-link\" aria-label=\"Direct link to Docker services\" title=\"Direct link to Docker services\">​</a></h3>\n<p>Here’s the <code>docker-compose.yaml</code> file that manages three containers:</p>\n<div class=\"language-yaml codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">Docker compose file</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-yaml codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token key atrule\" style=\"color:#00a4db\">version</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"3.4\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token key atrule\" style=\"color:#00a4db\">services</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token key atrule\" style=\"color:#00a4db\">api</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">container_name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> fastapi_server</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">build</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> backend/.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">command</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"uvicorn server:app --host 0.0.0.0 --port 8082\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">ports</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"8082:8082\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">environment</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> OPENAI_API_KEY=$</span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\">OPENAI_API_KEY</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> DAGWORKS_API_KEY=$</span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\">DAGWORKS_API_KEY</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">networks</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> rag</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token key atrule\" style=\"color:#00a4db\">app</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">container_name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> streamlit_app</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">build</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> frontend/.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">command</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"streamlit run --server.port 8080 --server.enableCORS false Information.py\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">ports</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"8080:8080\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">networks</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> rag</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token key atrule\" style=\"color:#00a4db\">weaviate</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">image</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> cr.weaviate.io/semitechnologies/weaviate</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\">1.19.8</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">container_name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> weaviate_storage</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">command</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\">host 0.0.0.0 </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\">port '8083' </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\">scheme http</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">ports</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> 8083</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token number\" style=\"color:#36acaa\">8083</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">restart</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> on</span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\">failure</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">environment</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token key atrule\" style=\"color:#00a4db\">QUERY_DEFAULTS_LIMIT</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">25</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token key atrule\" style=\"color:#00a4db\">AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">'true'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token key atrule\" style=\"color:#00a4db\">PERSISTENCE_DATA_PATH</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">'/var/lib/weaviate'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token key atrule\" style=\"color:#00a4db\">DEFAULT_VECTORIZER_MODULE</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">'none'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token key atrule\" style=\"color:#00a4db\">ENABLE_MODULES</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">''</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token key atrule\" style=\"color:#00a4db\">CLUSTER_HOSTNAME</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">'node1'</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token key atrule\" style=\"color:#00a4db\">networks</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">     </span><span class=\"token punctuation\" style=\"color:#393A34\">-</span><span class=\"token plain\"> rag</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token key atrule\" style=\"color:#00a4db\">networks</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  rag</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>This sets the main configuration of each service. For the FastAPI backend (api service), we pass the OpenAI key to the FastAPI backend and optionally set the DAGWorks API key. The Weaviate configuration is generated by their <a href=\"https://weaviate.io/developers/weaviate/installation/docker-compose\" target=\"_blank\" rel=\"noopener noreferrer\">interactive tool</a>. Then, for each service the command section sets their entry point. They are all connected together via the <code>rag</code> <a href=\"https://docs.docker.com/network/drivers/bridge/\" target=\"_blank\" rel=\"noopener noreferrer\">bridge network</a>. This allows services to communicate via a local URL of the following format <code>http://{container_name}:{port}</code> (e.g., <code>http://fastapi_server:8082</code>). You could want to have your vector store less tightly coupled if it is used by other applications.</p>\n<p>When developing locally, containers can be accessed via<code> http://127.0.0.1:{port}</code> (try not to use <a href=\"https://www.youtube.com/watch?v=98SYTvNw1kw\" target=\"_blank\" rel=\"noopener noreferrer\">localhost</a>). You can keep containers running and call <code>docker compose up -d –build</code> to rebuild them as you make changes. In particular, this is useful to view frontend UI changes and test backend changes manually via the Swagger UI at <a href=\"http://localhost:8082/docs\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8082/docs</a>.  To see container logs, you can use <code>docker compose logs -f</code>  to see the logs from applications from their respective containers.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"limitations\">Limitations<a href=\"https://tjean.me/blog/rag#limitations\" class=\"hash-link\" aria-label=\"Direct link to Limitations\" title=\"Direct link to Limitations\">​</a></h2>\n<p>This example aims to be a reference architecture, and demonstrate how to build a RAG system and give you a solid basis to start your own project. However, it is by no means perfect. Here’s a list of limitations or areas we could improve upon:</p>\n<p><strong>arXiv downloads</strong>. The ingestion dataflow for arXiv files requires downloading the PDF of articles locally (on the FastAPI container) before subsequent steps. That is PDF files could fill up your docker container. A better approach would be to use the built-in <a href=\"https://docs.python.org/3/library/tempfile.html\" target=\"_blank\" rel=\"noopener noreferrer\">tempfile library</a> for <code>tempfile.NamedTemporaryFile</code> (note that tempfile is an area of active Python development and saw several changes since 3.8). For instance, PDF files sent to FastAPI (via Streamlit or POST) use temporary files via <code>streamlit.runtime.UploadedFile</code> and <code>fastapi.Uploadfile</code>.</p>\n<p><strong>Weaviate duplicates</strong>. Having duplicate sources in your vector store can reduce the quality of retrieval. You’d most likely prefer the “5 most-relevant, but somewhat distinct” chunks from the “5-most relevant and almost identical” chunks to generate your answer. However, the presented RAG system doesn’t prevent you from uploading duplicate documents during ingestion and finding duplicate / nearly files is a generally complex problem. One approach would be to first select the sets of chunks with very similar embeddings (potential duplicate) then use <a href=\"https://github.com/seatgeek/thefuzz\" target=\"_blank\" rel=\"noopener noreferrer\">fuzzy matching</a> (which is much less computationally efficient) on the chunk’s text to score potential duplicates. The downside is that it requires compute and can impact latency having to do this for the embedding of every chunk before deduplication.</p>\n<p><strong>REST API conventions</strong>. This example showcases a client-server architecture with the ingestion and retrieval of a RAG workflow. However, the design and the naming of the endpoints don’t follow the <a href=\"https://restfulapi.net/resource-naming/\" target=\"_blank\" rel=\"noopener noreferrer\">REST best practices</a>. Following these conventions improves the semantics and the readability of your project, which is critical from proper downstream use. We will improve and update our API definition in our future post about testing. Make sure to subscribe to be notified when it we release it!</p>\n<p><strong>Client-server communication</strong>. You could use <a href=\"https://docs.pydantic.dev/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">Pydantic</a> more extensively to define the FastAPI <a href=\"https://fastapi.tiangolo.com/tutorial/response-model\" target=\"_blank\" rel=\"noopener noreferrer\">requests and response types</a>. This code could be used in both the <code>backend/server.py</code> and <code>frontend/client.py</code> to make development less error prone.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"summary\">Summary<a href=\"https://tjean.me/blog/rag#summary\" class=\"hash-link\" aria-label=\"Direct link to Summary\" title=\"Direct link to Summary\">​</a></h2>\n<p>We covered a lot in this post. Most importantly, we leave you with a reference architecture blueprint to get started with RAG applications. To use it, we suggest you should define your application’s dataflows, then create the endpoints for the operations supported by your server, and finally build the best-suited user interface for your application. Congratulations for getting through! Please bookmark this post, and feel free to revisit sections of this post as you make progress; if something isn’t clear please leave a comment/or suggest a PR to the repo to improve this example.</p>\n<p>You might be interested by other posts in this series:</p>\n<ul>\n<li><a href=\"https://blog.dagworks.io/p/llmops-production-prompt-engineering\" target=\"_blank\" rel=\"noopener noreferrer\">LLMOps: Production prompt engineering patterns with Hamilton</a></li>\n<li><a href=\"https://tjean.me/2023-07-11-modular-llm\">Building a maintainable and modular LLM application stack with Hamilton</a></li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"we-want-to-hear-from-you\">We want to hear from you!<a href=\"https://tjean.me/blog/rag#we-want-to-hear-from-you\" class=\"hash-link\" aria-label=\"Direct link to We want to hear from you!\" title=\"Direct link to We want to hear from you!\">​</a></h2>\n<p>If you’re excited by any of this, or have strong opinions, leave a comment, or drop by our Slack channel! Some links to do praise/complain/chat:</p>\n<p>📣 join our community on <a href=\"https://hamilton-opensource.slack.com/join/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg#/shared-invite/email\" target=\"_blank\" rel=\"noopener noreferrer\">Slack</a>  —  we’re more than happy to help answer questions you might have or get you started.</p>\n<p>⭐️ us on <a href=\"https://github.com/dagworks-inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>.</p>\n<p>📝 leave us an <a href=\"https://github.com/DAGWorks-Inc/hamilton/issues\" target=\"_blank\" rel=\"noopener noreferrer\">issue</a> if you find something.</p>\n<p>📚 read our <a href=\"https://hamilton.dagworks.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>.</p>\n<p>⌨️ <a href=\"https://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">interactively learn</a> about Hamilton in your browser.</p>",
            "url": "https://tjean.me/blog/rag",
            "title": "Retrieval augmented generation (RAG) with Streamlit, FastAPI, Weaviate, and Hamilton!",
            "summary": "Off-the-shelf LLMs are excellent at manipulating and generating text, but they only know general facts about the world and probably very little about your use case. Retrieval augmented generation (RAG) refers not to a single algorithm, but rather a broad approach to provide relevant context to an LLM. As industry applications mature, RAG strategies will be tailored case-by-case to optimize relevance, business outcomes, and operational concerns.",
            "date_modified": "2023-09-08T00:00:00.000Z",
            "author": {
                "name": "Thierry Jean",
                "url": "https://github.com/zilto"
            },
            "tags": [
                "Hamilton",
                "Retrieval augmented generation",
                "OpenAI",
                "LLM",
                "FastAPI",
                "Docker"
            ]
        },
        {
            "id": "https://tjean.me/blog/pdf-summarizer",
            "content_html": "<p>Skip learning convoluted LLM-specific frameworks and write your first LLM application using regular Python functions and <a href=\"https://github.com/dagWorks-Inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton</a>! In this post, we’ll present a containerized PDF summarizer powered by the <a href=\"https://platform.openai.com/docs/api-reference\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAI API</a>. Its flow is encoded in Hamilton, which the <a href=\"https://fastapi.tiangolo.com/\" target=\"_blank\" rel=\"noopener noreferrer\">FastAPI</a> backend runs and exposes as an inference endpoint. The lightweight frontend uses <a href=\"https://docs.streamlit.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Streamlit</a> and exercises the backend. (<a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/LLM_Workflows/pdf_summarizer\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>)</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-8afd5b643e3596877a57c4549fba352b.png\" width=\"975\" height=\"646\" class=\"img_ev3q\"></p>\n<blockquote>\n<p>crosspost from <a href=\"https://blog.dagworks.io/p/containerized-pdf-summarizer-with\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.dagworks.io/p/containerized-pdf-summarizer-with</a></p>\n</blockquote>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"the-first-generation-of-large-language-models-applications\">The first generation of large language models applications<a href=\"https://tjean.me/blog/pdf-summarizer#the-first-generation-of-large-language-models-applications\" class=\"hash-link\" aria-label=\"Direct link to The first generation of large language models applications\" title=\"Direct link to The first generation of large language models applications\">​</a></h2>\n<p>Large language models (LLMs) open up new opportunities to exploit unstructured text data and ways to interact with the computer, such as chat-based information retrieval, writing assistance, or text summarization. These models can complete many different tasks that need to be specified via a text prompt. This flexibility in terms of input and output differs from previous ML/AI initiatives in industry (e.g., forecasting, recommender systems, computer vision) that had precisely defined inputs and outputs formats. It is one of the central <a href=\"https://huyenchip.com/2023/04/11/llm-engineering.html\" target=\"_blank\" rel=\"noopener noreferrer\">challenges and complexities</a> introduced by LLMs, and furthers the need for traceability and validation steps for data pipelines.</p>\n<p>Accordingly, the tooling to solve these problems is nascent and changes rapidly. Not only is the best development paradigm undefined, it is a moving target since LLMs themselves are evolving. Building an application using LLMs today will almost certainly lead to dealing with breaking changes or migrations around the LLM APIs, prompt versioning, context management, storage infrastructure (e.g., vector databases), monitoring frameworks, and other service vendors.</p>\n<p>In their current state, the available LLM frameworks might get you up and running, but are missing the modularity and the transparency required for a proper software development lifecycle that considers production operations.</p>\n<ul>\n<li>How do you iterate &amp; test the behavior of new prompts and version them?</li>\n<li>Do you version your prompt with the code &amp; LLM used? How coupled are they?</li>\n<li>How do you run your workflows in a batch setting without a web-server?</li>\n<li>How do you monitor your system’s performance and data artifacts produced without slowing down your development cycle?</li>\n<li>How do you structure a readable codebase that facilitates collaboration and allows you to understand the impacts of changes on your various workflows?</li>\n</ul>\n<p>We’ll explore through a series of posts how to overcome these challenges when adding LLM capabilities into your application. In this article, we ground the discussion around a PDF summarizer and future posts will extend the example with testing, Spark support, lineage, etc. <strong>Subscribe to get updates as we publish them</strong>!</p>\n<h1>Introducing Hamilton</h1>\n<p>LLMs-based applications can be expressed as <a href=\"https://en.wikipedia.org/wiki/Dataflow_programming\" target=\"_blank\" rel=\"noopener noreferrer\">dataflows</a>, which boils down to modeling your program by focusing on the moving of data artifacts (prompts, context, knowledge base, generated response, etc.) with computation (what you do with the data).</p>\n<p><a href=\"https://github.com/dagWorks-Inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton</a> is a declarative micro-framework to describe dataflows in Python. Its strength is expressing the flow of data and computation in a straightforward and easy to maintain manner (much like dbt does for SQL). It has minimal dependencies and can run anywhere Python runs, meaning the same code will work in development notebooks, scripts, Spark clusters, or production web-services. Hamilton is not a new framework (3.5+ years old), and has been used for years in production modeling data &amp; machine learning dataflows.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-1-6b730d286b040562659cc780fc12a680.png\" width=\"1037\" height=\"682\" class=\"img_ev3q\"></p>\n<p>The picture above encapsulates the function-centric declarative approach of Hamilton. The function’s name is tied to its outputs and its arguments define what data it depends on. This allows Hamilton to read functions found in a module and automatically generate the DAG to be executed. This paradigm incentivizes developers to write small modular functions instead of scripts or larger functions, without sacrificing iteration speed. As a result, it is easier to:</p>\n<ul>\n<li>Read and understand the codebase</li>\n<li>Edit implementations and extend your business logic</li>\n<li>Do data validation after key steps</li>\n<li>Understand downstream consequences of changes</li>\n<li>Unit test and prevent breaking changes</li>\n<li>Reuse functions or groups of functions across projects</li>\n<li>Add in platform concerns independent of the logic encoded with Hamilton.</li>\n</ul>\n<p>Again, to keep this post short and focused, we won’t dive into how to do all the above.</p>\n<blockquote>\n<p>If you have never tried Hamilton, feel free to visit our interactive browser demo at: <a href=\"https://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.tryhamilton.dev/</a></p>\n</blockquote>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"hamilton-for-llm-and-nlp-flows\">Hamilton for LLM and NLP flows<a href=\"https://tjean.me/blog/pdf-summarizer#hamilton-for-llm-and-nlp-flows\" class=\"hash-link\" aria-label=\"Direct link to Hamilton for LLM and NLP flows\" title=\"Direct link to Hamilton for LLM and NLP flows\">​</a></h2>\n<p>Given the rapid progress in the LLM and tooling space, adopting a low abstraction framework like Hamilton for your application facilitates writing a modular and well-tested codebase, as well as a straightforward approach to versioning flows. Having your focus on modularity early on will facilitate future upgrades and migrations, and allow you to keep up with state-of-the-art without breaking production.</p>\n<p>For LLM applications, being able to reuse code logic between development (e.g. notebooks, scripts) and production services (FastAPI, serverless services, Spark) has a large positive impact on development speed. Also, Hamilton decouples your LLM dataflow logic from your service/platform concerns. For example, the caching of OpenAI requests, application scaling, or monitoring, are platform concerns and should be separated as such. This decoupling is also helpful in a hand-off model if you operate in one; data scientists work on Hamilton modeling logic while engineers handle ensuring it runs with the appropriate monitoring in production. As you read this post, we invite you to think about how the code we show might develop and evolve in your organization – leave us a comment afterwards with your thoughts/reactions.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"building-a-modular-pdf-summarizer-application\">Building a modular PDF summarizer application<a href=\"https://tjean.me/blog/pdf-summarizer#building-a-modular-pdf-summarizer-application\" class=\"hash-link\" aria-label=\"Direct link to Building a modular PDF summarizer application\" title=\"Direct link to Building a modular PDF summarizer application\">​</a></h2>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-2-820b7941404ea8a723889fc61be177ea.png\" width=\"961\" height=\"461\" class=\"img_ev3q\"></p>\n<p>At the core, the application loads a PDF as text, chunks it, and calls the <a href=\"https://platform.openai.com/docs/api-reference\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAI API</a> to summarize the chunks and reduces them into a single summary. It is packaged as a frontend and a backend container using docker-compose. The frontend uses <a href=\"https://docs.streamlit.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Streamlit</a>, a library to write web UI using Python. When clicking on the <code>Summarize</code> button (see introduction image), an <code>HTTP POST</code> request <code>/summarize_sync</code> is made to the FastAPI backend. <a href=\"https://fastapi.tiangolo.com/\" target=\"_blank\" rel=\"noopener noreferrer\">FastAPI</a> is a library to create REST API endpoints to communicate with a server. When receiving the <code>/summarize_sync</code> request, the endpoint executes the relevant operation via an Hamilton driver instantiated on the server.</p>\n<blockquote>\n<p><a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/LLM_Workflows/pdf_summarizer\" target=\"_blank\" rel=\"noopener noreferrer\">Find the code on GitHub</a></p>\n</blockquote>\n<p>First, let’s look at the directory structure:</p>\n<div class=\"language-title=&quot;Directory language-title=&quot;directory codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-title=&quot;directory codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── README.md</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── docker-compose.yaml</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">├── backend</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── Dockerfile</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── requirements.txt</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   ├── server.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">│   └── summarization.py</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">└── frontend</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ├── Dockerfile</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ├── requirements.txt</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    └── app.py</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>At a high-level, the frontend and the backend are in separate folders, each with their own <code>Dockerfile</code> and <code>requirements.txt</code>. The backend has <code>server.py</code> which contains the FastAPI endpoints definition and the calls to the Hamilton driver, while <code>summarization.py</code> contains the dataflow logic used by the <code>Hamilton Driver</code>. If you’re coming from LangChain, you can think of <code>summarization.py</code> as the implementation of a more <a href=\"https://python.langchain.com/docs/modules/chains/\" target=\"_blank\" rel=\"noopener noreferrer\">modular chain</a>. The directory structure should feel natural and intuitive, making it easy to understand for any junior colleague joining your team.</p>\n<hr>\n<p>Now, let’s look at snippets of <code>summarization.py</code> and then <code>server.py</code> powering the backend:</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">Hamilton dataflows</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># summarization.py</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># ... imports </span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">summarize_chunk_of_text_prompt</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">content_type</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"an academic paper\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Base prompt for summarizing chunks of text.\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> </span><span class=\"token string-interpolation string\" style=\"color:#e3116c\">f\"Summarize this text from </span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:#393A34\">{</span><span class=\"token string-interpolation interpolation\">content_type</span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:#393A34\">}</span><span class=\"token string-interpolation string\" style=\"color:#e3116c\">. Extract any key points with reasoning.\\n\\nContent:\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">summarize_text_from_summaries_prompt</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">content_type</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"an academic paper\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Prompt for summarizing a paper from a list of summaries.\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> </span><span class=\"token string-interpolation string\" style=\"color:#e3116c\">f\"\"\"Write a summary collated from this collection of key points extracted from </span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:#393A34\">{</span><span class=\"token string-interpolation interpolation\">content_type</span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:#393A34\">}</span><span class=\"token string-interpolation string\" style=\"color:#e3116c\">.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token string-interpolation string\" style=\"color:#e3116c\">    The summary should highlight the core argument, conclusions and evidence, and answer the user's query.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token string-interpolation string\" style=\"color:#e3116c\">    User query: {{query}}</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token string-interpolation string\" style=\"color:#e3116c\">    The summary should be structured in bulleted lists following the headings Core Argument, Evidence, and Conclusions.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token string-interpolation string\" style=\"color:#e3116c\">    Key points:\\n{{results}}\\nSummary:\\n\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@config</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">when</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">file_type</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"pdf\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">raw_text__pdf</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">pdf_source</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">|</span><span class=\"token plain\"> </span><span class=\"token builtin\">bytes</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">|</span><span class=\"token plain\"> tempfile</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">SpooledTemporaryFile</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Takes a filepath to a PDF and returns a string of the PDF's contents</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    :param pdf_source: Series of filepaths to PDFs</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    :return: Series of strings of the PDFs' contents</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    \"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    reader </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> PdfReader</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">pdf_source</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    _pdf_text </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    page_number </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> page </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> reader</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">pages</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        page_number </span><span class=\"token operator\" style=\"color:#393A34\">+=</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        _pdf_text </span><span class=\"token operator\" style=\"color:#393A34\">+=</span><span class=\"token plain\"> page</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">extract_text</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">+</span><span class=\"token plain\"> </span><span class=\"token string-interpolation string\" style=\"color:#e3116c\">f\"\\nPage Number: </span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:#393A34\">{</span><span class=\"token string-interpolation interpolation\">page_number</span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:#393A34\">}</span><span class=\"token string-interpolation string\" style=\"color:#e3116c\">\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> _pdf_text</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># ... </span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">chunked_text</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    raw_text</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> max_token_length</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">int</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">1500</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> tokenizer_encoding</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"cl100k_base\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Chunks the pdf text into smaller chunks of size max_token_length.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    :param pdf_text: the Series of individual pdf texts to chunk.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    :param max_token_length: the maximum length of tokens in each chunk.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    :param tokenizer_encoding: the encoding to use for the tokenizer.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    :return: Series of chunked pdf text. Each element is a list of chunks.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    \"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    tokenizer </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> tiktoken</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">get_encoding</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">tokenizer_encoding</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    _encoded_chunks </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> _create_chunks</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">raw_text</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> max_token_length</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> tokenizer</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    _decoded_chunks </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">tokenizer</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">decode</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">chunk</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> chunk </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> _encoded_chunks</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> _decoded_chunks</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># ... </span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">summarized_text</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    prompt_and_text_content</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    openai_gpt_model</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Summarizes the text from the summarized chunks of the pdf.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    :param prompt_and_text_content: the prompt and content to send over.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    :param openai_gpt_model: which openai gpt model to use.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    :return: the string response from the openai API.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    \"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    response </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> openai</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">ChatCompletion</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">create</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        model</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">openai_gpt_model</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        messages</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                </span><span class=\"token string\" style=\"color:#e3116c\">\"role\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"user\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                </span><span class=\"token string\" style=\"color:#e3116c\">\"content\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> prompt_and_text_content</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        temperature</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> response</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"choices\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"message\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"content\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">if</span><span class=\"token plain\"> __name__ </span><span class=\"token operator\" style=\"color:#393A34\">==</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"__main__\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># run as a script to test Hamilton's execution</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> summarization</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> hamilton </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> base</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> driver</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dr </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Driver</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        summarization</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        adapter</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">SimplePythonGraphAdapter</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DictResult</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dr</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">display_all_functions</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"summary\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token string\" style=\"color:#e3116c\">\"format\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"png\"</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>Notice the chunking of code into functions. Each one has a clear role and shouldn’t have too many lines of code. It’s easy to understand a function’s purpose through its name, type annotations, docstring, and dependencies specified as arguments. As a bonus, Hamilton can produce a visualization of the module’s execution DAG for free! The top-level nodes, such as <code>user_query</code> and <code>openai_gpt_model</code>, are exposed to the user through the frontend and are processed down the DAG via FastAPI.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-3-66d249a1970e698b173673a186f2b794.png\" width=\"1308\" height=\"347\" class=\"img_ev3q\"></p>\n<p>Also, you might have noticed at the end the <code>if _name__ == “__main__”:</code> and the module importing itself via <code>import summarization</code>. This effectively allows you to load the module and execute it with Hamilton <em>outside</em> of the FastAPI server. This makes it easy to run and iterate over your Hamilton transformations during development, or <a href=\"https://en.wikipedia.org/wiki/Unit_testing\" target=\"_blank\" rel=\"noopener noreferrer\">unit test</a> them outside of your FastAPI web service.</p>\n<hr>\n<p>Now let’s look at server.py:</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">FastAPI server</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># server.py</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># ... imports</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> summarization</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># instantiate FastAPI app</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">app </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FastAPI</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># define constants for Hamilton driver</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">driver_config </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    file_type</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"pdf\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># instantiate the Hamilton driver; it will power all API endpoints</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># async driver for use with async functions</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">async_dr </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> h_async</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">AsyncDriver</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    driver_config</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    summarization</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># python module containing function logic</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    result_builder</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DictResult</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># sync driver for use with regular functions</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">sync_dr </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Driver</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    driver_config</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    summarization</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># python module containing function logic</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    adapter</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">SimplePythonGraphAdapter</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DictResult</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">class</span><span class=\"token plain\"> </span><span class=\"token class-name\">SummarizeResponse</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">pydantic</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">BaseModel</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Response to the /summarize endpoint\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    summary</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@app</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">post</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"/summarize\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">async</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">summarize_pdf</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    pdf_file</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">UploadFile</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    openai_gpt_model</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Form</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># = \"gpt-3.5-turbo-0613\",</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    content_type</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Form</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># = \"Scientific article\",</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    user_query</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Form</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># = \"Can you ELI5 the paper?\",</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> SummarizeResponse</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Request `summarized_text` from Hamilton driver with `pdf_file` and `user_query`\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    results </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">await</span><span class=\"token plain\"> async_dr</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">execute</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"summarized_text\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        inputs</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            pdf_source</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">pdf_file</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token builtin\">file</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            openai_gpt_model</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">openai_gpt_model</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            content_type</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">content_type</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            user_query</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">user_query</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> SummarizeResponse</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">summary</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">results</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"summarized_text\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@app</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">post</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"/summarize_sync\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">summarize_pdf_sync</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    pdf_file</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">UploadFile</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    openai_gpt_model</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Form</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># = \"gpt-3.5-turbo-0613\",</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    content_type</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Form</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># = \"Scientific article\",</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    user_query</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> fastapi</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Form</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># = \"Can you ELI5 the paper?\",</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> SummarizeResponse</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Request `summarized_text` from Hamilton driver with `pdf_file` and `user_query`\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    results </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> sync_dr</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">execute</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"summarized_text\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        inputs</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            pdf_source</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">pdf_file</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token builtin\">file</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            openai_gpt_model</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">openai_gpt_model</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            content_type</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">content_type</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            user_query</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">user_query</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> SummarizeResponse</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">summary</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">results</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"summarized_text\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># add to SwaggerUI the execution DAG png</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># see http://localhost:8080/docs#/default/summarize_pdf_summarize_post</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">base64_viz </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> base64</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">b64encode</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"summarization_module.png\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"rb\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">read</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">decode</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"utf-8\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">app</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">routes</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">description </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string-interpolation string\" style=\"color:#e3116c\">f\"\"\"&lt;h1&gt;Execution DAG&lt;/h1&gt;&lt;img alt=\"\" src=\"data:image/png;base64,</span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:#393A34\">{</span><span class=\"token string-interpolation interpolation\">base64_viz</span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:#393A34\">}</span><span class=\"token string-interpolation string\" style=\"color:#e3116c\">\"/&gt;\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">if</span><span class=\"token plain\"> __name__ </span><span class=\"token operator\" style=\"color:#393A34\">==</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"__main__\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># run as a script to test server locally</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> uvicorn</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    uvicorn</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">run</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">app</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> host</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"0.0.0.0\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> port</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token number\" style=\"color:#36acaa\">8080</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>The file server.py is responsible of instantiating FastAPI and defining the server’s endpoints. We also instantiate <em>synchronous</em> and <em>asynchronous</em> Hamilton Driver objects to power both types of endpoint styles that FastAPI supports (<strong>Note</strong>. <a href=\"https://fastapi.tiangolo.com/async/#in-a-hurry\" target=\"_blank\" rel=\"noopener noreferrer\">FastAPI manages non-async functions like async ones</a>). Then, in the endpoints definitions, it is a matter of handling the request data, passing it to Hamilton and requesting the variable summarized_text, and sending a formatted response to the client.</p>\n<p>Towards the end of the snippet, there is a cryptic line of code that encodes the visualization of the Hamilton Driver as <code>base64</code> and embeds it in the FastAPI generated Swagger UI for great documentation!</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-4-cb2d104268523d5785cac6c9d78e7dc6.png\" width=\"975\" height=\"1104\" class=\"img_ev3q\"></p>\n<p>Again, you’ll find a <code>if _name__ == “__main__”:</code> statement allowing you to start a local server by calling python server.py. This way, you can test your server code independently from your Hamilton transformations and then add <a href=\"https://en.wikipedia.org/wiki/Integration_testing\" target=\"_blank\" rel=\"noopener noreferrer\">integration tests</a>.</p>\n<p>To learn more about the frontend, we invite you to view <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/LLM_Workflows/pdf_summarizer\" target=\"_blank\" rel=\"noopener noreferrer\">the full example on GitHub</a>.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"to-recap\">To recap<a href=\"https://tjean.me/blog/pdf-summarizer#to-recap\" class=\"hash-link\" aria-label=\"Direct link to To recap\" title=\"Direct link to To recap\">​</a></h2>\n<p>In this post we showed how to:</p>\n<ul>\n<li>Break down a PDF summarizer flow into individual functions with Hamilton</li>\n<li>Use Hamilton for inference with FastAPI, and exercise the required DAG inputs through POST requests</li>\n<li>Decouple the code for the UI, server, and application logic to enable faster development</li>\n<li>Structure a project’s directory and code to help readability and maintainability</li>\n</ul>\n<p>The function-centric approach of Hamilton makes it easy to update or extend your application dataflow. For example, you could swap out OpenAI API for Anthropic (<a href=\"https://blog.dagworks.io/p/building-a-maintainable-and-modular\" target=\"_blank\" rel=\"noopener noreferrer\">Learn how to swap stack components</a>), or add document processing steps by writing a few functions. With Hamilton being open source and being an extensible platform, motivated developers can tailor it to their needs for example by implementing custom caching strategies (e.g. <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/caching_nodes\" target=\"_blank\" rel=\"noopener noreferrer\">use this, or extend it</a>), data validation steps (e.g. <a href=\"https://hamilton.dagworks.io/en/latest/reference/decorators/check_output/#check-output\" target=\"_blank\" rel=\"noopener noreferrer\">use/extend this</a>), or telemetry capture.</p>\n<p>Like what you heard? We’d love a <a href=\"https://github.com/DAGWorks-Inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">star on GitHub</a> and/or subscribe to this blog to get updates.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"whats-next\">What’s next<a href=\"https://tjean.me/blog/pdf-summarizer#whats-next\" class=\"hash-link\" aria-label=\"Direct link to What’s next\" title=\"Direct link to What’s next\">​</a></h2>\n<p>Thanks for getting this far! As we mentioned in the beginning we’ve got a bunch of exciting content planned🥳 Here’s a few lines about some of our upcoming posts on how to build LLM-based applications for production. Subscribe to get updates as we publish them!</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"testing-its-important-and-with-hamilton-its-simpler\">Testing: it’s important and with Hamilton it’s simpler<a href=\"https://tjean.me/blog/pdf-summarizer#testing-its-important-and-with-hamilton-its-simpler\" class=\"hash-link\" aria-label=\"Direct link to Testing: it’s important and with Hamilton it’s simpler\" title=\"Direct link to Testing: it’s important and with Hamilton it’s simpler\">​</a></h3>\n<p>Deploying and maintaining an application in production requires great testing practices. You’ll find that the functions and the dataflows defined with Hamilton are much friendlier to test than object-oriented frameworks. In this next blog, we’ll add to the PDF summarizer unit tests for Hamilton functions, integration tests to use Hamilton with FastAPI, and data validation checks to ensure correct outputs from the LLMs. We’ll also show you how to pull intermediate values from the DAG to plug into your monitoring system!</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"spark-scale-up-your-hamilton-dataflow-with-the-spark-executor\">Spark: scale up your Hamilton dataflow with the Spark executor<a href=\"https://tjean.me/blog/pdf-summarizer#spark-scale-up-your-hamilton-dataflow-with-the-spark-executor\" class=\"hash-link\" aria-label=\"Direct link to Spark: scale up your Hamilton dataflow with the Spark executor\" title=\"Direct link to Spark: scale up your Hamilton dataflow with the Spark executor\">​</a></h3>\n<p>Did you know that Hamilton allows you to scale up your dataflow to run in a batch workflow without migrating your code? Your dataflow defined for FastAPI can also run on Spark! In the follow-up post, we’ll show how to take the summarizer dataflow and run it on Spark to process lots of tables of data &amp; PDFs in parallel. Operating efficiently at scale is important to be able to re-process all of your documents when upgrading your dataflow (e.g., computing embeddings with a new LLM). Also, this is a key feature to prevent <a href=\"https://www.hopsworks.ai/dictionary/online-offline-feature-skew\" target=\"_blank\" rel=\"noopener noreferrer\">implementation skew</a> between online &amp; offline efforts.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"rag-expand-your-hamilton-application-to-cover-ingestion-and-retrieval\">RAG: expand your Hamilton application to cover ingestion and retrieval<a href=\"https://tjean.me/blog/pdf-summarizer#rag-expand-your-hamilton-application-to-cover-ingestion-and-retrieval\" class=\"hash-link\" aria-label=\"Direct link to RAG: expand your Hamilton application to cover ingestion and retrieval\" title=\"Direct link to RAG: expand your Hamilton application to cover ingestion and retrieval\">​</a></h3>\n<p>Instead of being passed in the PDF to summarize, we might have a corpus of documents to choose from to answer users queries. In this upcoming post, we’ll extend the PDF summarizer to a typical <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-customize-rag.html\" target=\"_blank\" rel=\"noopener noreferrer\">Retrieval Augmented Generation (RAG)</a> workflow. You’ll see how Hamilton can manage multiple flows (ingestion, retrieval, summarization) and expose them via API endpoints for an end-to-end RAG application. In the meantime, <a href=\"https://blog.dagworks.io/p/building-a-maintainable-and-modular\" target=\"_blank\" rel=\"noopener noreferrer\">this blog post</a> shows the precursor step of ingesting data into a vector database for RAG use with Hamilton.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"want-lineage-catalog-and-observability-out-of-the-box-use-hamilton--dagworks\">Want lineage, catalog, and observability out of the box? Use Hamilton + DAGWorks.<a href=\"https://tjean.me/blog/pdf-summarizer#want-lineage-catalog-and-observability-out-of-the-box-use-hamilton--dagworks\" class=\"hash-link\" aria-label=\"Direct link to Want lineage, catalog, and observability out of the box? Use Hamilton + DAGWorks.\" title=\"Direct link to Want lineage, catalog, and observability out of the box? Use Hamilton + DAGWorks.\">​</a></h2>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-5-3bf77f3353d59b0942067067948a777d.png\" width=\"1456\" height=\"314\" class=\"img_ev3q\"></p>\n<p>Lastly before we go, if you’re interested in automatically capturing versions of flows, seeing inputs, executions, and observing what happened - you can try out what we’re building at <a href=\"https://www.dagworks.io/\" target=\"_blank\" rel=\"noopener noreferrer\">DAGWorks</a> with a <a href=\"https://github.com/DAGWorks-Inc/hamilton/blob/main/examples/LLM_Workflows/pdf_summarizer/backend/server.py#L36-L45\" target=\"_blank\" rel=\"noopener noreferrer\">one-line replacement</a>.</p>\n<p>The DAGWorks platform helps you:</p>\n<ul>\n<li><strong>Version dataflows</strong>. As you iterate and change the shape, contents and structure of your code, DAGWorks tracks changes and allows you to view diffs.</li>\n<li><strong>Monitor runs</strong>. Understand which DAG nodes were executed, how long it took, what were the outputs, etc. from your dashboard.</li>\n<li><strong>Debug failures</strong>. DAG execution errors are contextualized with other node results and you can compare across multiple runs to view DAG changes.</li>\n</ul>\n<p>To get started, in the example we have a few commented out pieces of code you’ll need to flip on (quick instructions <a href=\"https://github.com/DAGWorks-Inc/hamilton/blob/main/examples/LLM_Workflows/pdf_summarizer/README.md#connecting-to-dagworks\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> and DAGWorks docs <a href=\"https://docs.dagworks.io/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>):</p>\n<ol>\n<li>Install <code>dagworks-sdk</code> – uncomment <a href=\"https://github.com/DAGWorks-Inc/hamilton/blob/main/examples/LLM_Workflows/pdf_summarizer/backend/requirements.txt#L11\" target=\"_blank\" rel=\"noopener noreferrer\">this line</a> in <code>requirements.txt</code>.</li>\n<li>Add the <code>DAGWORKS_API_KEY</code> to <code>.env</code> – <a href=\"https://www.dagworks.io/pricing\" target=\"_blank\" rel=\"noopener noreferrer\">sign up</a> for an account there’s a free tier! Create an <code>API_KEY</code> and save it.</li>\n<li>Create a DAGWorks project – note the project ID (see docs <a href=\"https://docs.dagworks.io/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> for how to do that).</li>\n<li>Instantiate the DAGWorks Driver – <a href=\"https://github.com/DAGWorks-Inc/hamilton/blob/main/examples/LLM_Workflows/pdf_summarizer/backend/server.py#L34-L45\" target=\"_blank\" rel=\"noopener noreferrer\">uncomment this code</a> in the server to instantiate the DAGWorks driver and fill in your project details.</li>\n<li>Rebuild the containers and you’re good to go!</li>\n</ol>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"we-want-to-hear-from-you\">We want to hear from you!<a href=\"https://tjean.me/blog/pdf-summarizer#we-want-to-hear-from-you\" class=\"hash-link\" aria-label=\"Direct link to We want to hear from you!\" title=\"Direct link to We want to hear from you!\">​</a></h2>\n<p>If you’re excited by any of this, or have strong opinions, drop by our Slack channel / or leave some comments here! Some resources to get you help:</p>\n<p>📣 join our community on <a href=\"https://join.slack.com/t/hamilton-opensource/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg\" target=\"_blank\" rel=\"noopener noreferrer\">Slack</a>  —  we’re more than happy to help answer questions you might have or get you started.</p>\n<p>⭐️ us on <a href=\"https://github.com/DAGWorks-Inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></p>\n<p>📝 leave us an <a href=\"https://github.com/DAGWorks-Inc/hamilton/issues\" target=\"_blank\" rel=\"noopener noreferrer\">issue</a> if you find something</p>\n<p>Other Hamilton posts you might be interested in:</p>\n<ul>\n<li><a href=\"https://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">tryhamilton.dev</a> – an interactive tutorial in your browser!</li>\n<li><a href=\"https://blog.dagworks.io/p/building-a-maintainable-and-modular\" target=\"_blank\" rel=\"noopener noreferrer\">Build a modular LLM stack with Hamilton</a></li>\n<li><a href=\"https://blog.dagworks.io/publish/post/130538397\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton + Airflow</a> (<a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/airflow\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>)</li>\n<li><a href=\"https://blog.dagworks.io/p/featurization-integrating-hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton + Feast</a> (<a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/feast\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>)</li>\n<li><a href=\"https://blog.dagworks.io/p/how-to-use-hamilton-with-pandas-in-5-minutes-89f63e5af8f5\" target=\"_blank\" rel=\"noopener noreferrer\">Pandas data transformations in Hamilton in 5 minutes</a></li>\n<li><a href=\"https://blog.dagworks.io/p/lineage-hamilton-in-10-minutes-c2b8a944e2e6\" target=\"_blank\" rel=\"noopener noreferrer\">Lineage + Hamilton in 10 minutes</a></li>\n</ul>",
            "url": "https://tjean.me/blog/pdf-summarizer",
            "title": "Containerized PDF Summarizer with FastAPI and Hamilton",
            "summary": "Skip learning convoluted LLM-specific frameworks and write your first LLM application using regular Python functions and Hamilton! In this post, we’ll present a containerized PDF summarizer powered by the OpenAI API. Its flow is encoded in Hamilton, which the FastAPI backend runs and exposes as an inference endpoint. The lightweight frontend uses Streamlit and exercises the backend. (GitHub repo)",
            "date_modified": "2023-08-18T00:00:00.000Z",
            "author": {
                "name": "Thierry Jean",
                "url": "https://github.com/zilto"
            },
            "tags": [
                "Hamilton",
                "OpenAI",
                "LLM",
                "FastAPI",
                "Docker"
            ]
        },
        {
            "id": "https://tjean.me/blog/feast-hamilton",
            "content_html": "<p>Are you using Feast? or perhaps you are having trouble with it? Or perhaps you are considering adopting it? In this post, you will learn the operational benefits of using Feast with Hamilton. Feast will act as your “feature store”, while Hamilton will be your in-process “feature processing engine”. We start by providing an overview of Feast, then show how Hamilton fits into the picture. At the end, we give a recipe for where to go from here, depending on where you are in your “feature journey”.</p>\n<blockquote>\n<p>crosspost from <a href=\"https://blog.dagworks.io/p/featurization-integrating-hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.dagworks.io/p/featurization-integrating-hamilton</a></p>\n</blockquote>\n<blockquote>\n<p>Note: by “feature” we are referring to <a href=\"https://en.wikipedia.org/wiki/Feature_(machine_learning)\" target=\"_blank\" rel=\"noopener noreferrer\">this meaning of the word</a>.</p>\n</blockquote>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"what-problem-does-feast-solve\">What problem does Feast solve?<a href=\"https://tjean.me/blog/feast-hamilton#what-problem-does-feast-solve\" class=\"hash-link\" aria-label=\"Direct link to What problem does Feast solve?\" title=\"Direct link to What problem does Feast solve?\">​</a></h2>\n<p>Feast is an open-source <a href=\"https://www.featurestore.org/what-is-a-feature-store\" target=\"_blank\" rel=\"noopener noreferrer\">feature store</a>, a specialized piece of machine learning (ML) infrastructure that centralizes computed feature data and metadata. The feature store sits above the storage layer and unifies the output of various data sources (streaming, operational databases, data warehouse, app session, etc.) to provide a simple interface to query features for your ML application. Feature stores are critical to the operations of organizations serving high volumes of predictions (e.g., Uber, AirBnb, LinkedIn).</p>\n<blockquote>\n<p>Note: Feature stores introduce a lot of complexity that should be justified by a decent number of projects in production. Please read <a href=\"https://medium.com/data-for-ai/feature-pipelines-and-feature-stores-deep-dive-into-system-engineering-and-analytical-tradeoffs-3c208af5e05f\" target=\"_blank\" rel=\"noopener noreferrer\">this blog</a> by FeatureStoresForML for a detailed look at the pros and cons of feature stores. You may only need Hamilton, in which case, we direct readers to our <a href=\"https://hamilton.dagworks.io/en/latest/how-tos/use-for-feature-engineering/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a> and <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/feature_engineering_multiple_contexts\" target=\"_blank\" rel=\"noopener noreferrer\">example</a> to get you started!</p>\n</blockquote>\n<p>The feature store abstraction delineates feature producers from downstream users (feature consumers), effectively creating a contract between the two parties. Feature creation and use can get messy, especially when one wants to share them across an organization. One way to do that is to centralize features via data, i.e. put them all into the same store, and users can pull from this store to power their machine learning models. A feature store can then offer guardrails to ensure that offline model training matches online settings (i.e., preventing <a href=\"https://developers.google.com/machine-learning/guides/rules-of-ml#training-serving_skew\" target=\"_blank\" rel=\"noopener noreferrer\">training/serving skew</a>). Feature stores can help reduce system latency by caching features in an “online store” (more on that below) for efficient retrieval.&nbsp; This <a href=\"https://medium.com/@endeavordata/streamlining-machine-learning-development-with-a-feature-store-680ee6d45c64\" target=\"_blank\" rel=\"noopener noreferrer\">blog</a> explains further the benefits of centralizing data into a feature store.</p>\n<p>The <a href=\"https://docs.feast.dev/#example-use-cases\" target=\"_blank\" rel=\"noopener noreferrer\">Feast documentation</a> mentions the following typical use cases:</p>\n<ul>\n<li>Personalizing online recommendations by leveraging pre-computed historical user or item features.</li>\n<li>Online fraud detection, using features that compare against (pre-computed) historical transaction patterns</li>\n<li>Credit scoring, using pre-computed historical features to compute probability of default</li>\n<li>Churn prediction (an offline model), generating feature values for all users at a fixed cadence in batch</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"what-is-feast\">What is Feast?<a href=\"https://tjean.me/blog/feast-hamilton#what-is-feast\" class=\"hash-link\" aria-label=\"Direct link to What is Feast?\" title=\"Direct link to What is Feast?\">​</a></h2>\n<p>If one is unfamiliar with Feast, we recommend reading the Feast <a href=\"https://docs.feast.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">introduction page</a>, but here are some high-level key considerations:</p>\n<p><strong>What Feast does</strong>:</p>\n<ul>\n<li>Stores metadata on features that have been registered with it</li>\n<li>Provides an abstraction to push to &amp; query for materialized feature data.</li>\n<li>Facilitates proper <a href=\"https://docs.feast.dev/getting-started/concepts/point-in-time-joins\" target=\"_blank\" rel=\"noopener noreferrer\">point-in-time</a> (i.e., “time-travel”) table joins. Useful for creating training sets from features.</li>\n<li>Helps you integrate heterogeneous sources of feature data into a central place.</li>\n</ul>\n<p><strong>What Feast doesn’t do</strong>:</p>\n<ul>\n<li>Perform the transformations to compute your features.</li>\n<li>Store data itself; it relies on being set up on top of your existing infrastructure.</li>\n<li>Orchestrate your data transformation pipelines that would perform feature computation.</li>\n<li>Help you write clean transformation code &amp; organize it.</li>\n<li>Provide lineage &amp; provenance for your features.</li>\n</ul>\n<p>Here are a few <a href=\"https://docs.feast.dev/getting-started/concepts\" target=\"_blank\" rel=\"noopener noreferrer\">Feast key terms</a> relevant to this post:</p>\n<ul>\n<li><strong>Entity</strong>: a real-world entity we care about (e.g., user, city, month, product SKU).</li>\n<li><strong>DataSource</strong>: a physical storage of data (e.g., file, database, data warehouse).</li>\n<li><strong>FeatureView</strong>: the table schema of a data source with additional metadata.</li>\n<li><strong>FeatureService</strong>: a new table schema resulting from joining one or more FeatureViews.</li>\n<li><strong>Offline store</strong>: an interface to read DataSources and do the point-in-time joins at query time.</li>\n<li><strong>Online store</strong>: an interface to read FeatureService already stored with the joins completed.</li>\n<li><strong>Feast registry</strong>: the single central catalog containing the defined Feast objects and relationships.</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"more-on-feature-computation-and-lineage\">More on feature computation and lineage<a href=\"https://tjean.me/blog/feast-hamilton#more-on-feature-computation-and-lineage\" class=\"hash-link\" aria-label=\"Direct link to More on feature computation and lineage\" title=\"Direct link to More on feature computation and lineage\">​</a></h2>\n<p>Since Feast is only responsible for the downstream use of features, it <a href=\"https://docs.feast.dev/#feast-is-not\" target=\"_blank\" rel=\"noopener noreferrer\">cannot compute them nor produce full lineage</a> from raw data for you. Feast validates the table schema you pass to it (columns name and type), but it can’t catch upstream data transformation changes that don't respect the desired schema.</p>\n<p>Without lineage, it is not possible to enforce CI/CD checks of the schema and trigger a recompute of the online store when feature transformations are updated for example. Additionally, not having lineage makes it hard to trace source data usage, remove dead feature code, as well as deprecate unused features, all which are important to help ensure smooth and cost efficient operations.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"how-can-hamilton-help\">How can Hamilton help?<a href=\"https://tjean.me/blog/feast-hamilton#how-can-hamilton-help\" class=\"hash-link\" aria-label=\"Direct link to How can Hamilton help?\" title=\"Direct link to How can Hamilton help?\">​</a></h2>\n<p>Hamilton is a Python micro-orchestration framework to express data transformations. It helps one write Python code that is modular and reusable, and that can be executed as a direct acyclic graph (DAG). Hamilton was initially developed and used in production to create large dataframes (100+ columns) for machine learning while preserving strong lineage capabilities (see <a href=\"https://blog.dagworks.io/p/functions-dags-introducing-hamilton-a-microframework-for-dataframe-generation-more-8e34b84efc1d\" target=\"_blank\" rel=\"noopener noreferrer\">the origin story</a>). Its strength is expressing the flow of data &amp; computation in a way that is straightforward to create and maintain (much like DBT does for SQL). If you are considering Feast, it likely means you also have some data scale, so just to mention it, that Hamilton can be run at scale as well. It has integrations with Spark, Dask, Ray, and can even scale up your pandas code for free (<a href=\"https://hamilton.dagworks.io/en/latest/how-tos/scale-up/\" target=\"_blank\" rel=\"noopener noreferrer\">learn more here</a>)!</p>\n<blockquote>\n<p>If you are new to Hamilton, we invite you to an interactive overview on <a href=\"http://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">tryhamilton.dev</a>, or this post. Hamilton will be discussed at a high level and relevant documentation references will be shared for more details.</p>\n</blockquote>\n<p>Hamilton is a flexible tool to express DAGs and can improve the Feast development experience in two primary ways:</p>\n<ol>\n<li>unifying how feature transformations are defined, executed across your stack</li>\n<li>define and manage the Feast objects you use to register features with Feast.</li>\n</ol>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-edc41774028e5a81a268163ce9108c24.png\" width=\"782\" height=\"292\" class=\"img_ev3q\"></p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"1-use-hamilton-for-data-transformations-before-pushing-to-feast\">1. Use Hamilton for data transformations before pushing to Feast<a href=\"https://tjean.me/blog/feast-hamilton#1-use-hamilton-for-data-transformations-before-pushing-to-feast\" class=\"hash-link\" aria-label=\"Direct link to 1. Use Hamilton for data transformations before pushing to Feast\" title=\"Direct link to 1. Use Hamilton for data transformations before pushing to Feast\">​</a></h3>\n<p>With Hamilton, you write declarative and granular data transformation functions. The functions declare what they output with the <strong>function name</strong> and declare what they require as input with the <strong>function arguments</strong>, and everything is type annotated. The logic of the computation is wholly contained within the function. The Hamilton Driver, which orchestrates execution in a python process, automatically generates the execution DAG from the function definitions and allows you to query for only the set of transforms you are interested in computing.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-1-6b730d286b040562659cc780fc12a680.png\" width=\"1037\" height=\"682\" class=\"img_ev3q\"></p>\n<p>Using this approach, you can easily scale to writing dataframes with 1000s of columns and maintain a clear lineage of upstream and downstream dependencies. To generate your features, simply call <code>Driver.execute()</code> and write the resulting dataframe to your Feast offline or online store. You can reuse the modular functions you define both in your offline and online environment to prevent training/serving skew.&nbsp; Also, the defined Hamilton functions can be easily reused in Feast’s <a href=\"https://docs.feast.dev/reference/alpha-on-demand-feature-view\" target=\"_blank\" rel=\"noopener noreferrer\">OnDemandFeatureView</a> when dealing with request data. In addition, Hamilton enables runtime data validation on any function by adding the <code>@check_output</code> decorator (<a href=\"https://hamilton.dagworks.io/en/latest/how-tos/run-data-quality-checks/\" target=\"_blank\" rel=\"noopener noreferrer\">learn more</a>), which can again mitigate training/serving skew and ensure feature output is checked before it is pushed to Feast.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">Push data to Feast</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> numpy </span><span class=\"token keyword\" style=\"color:#00009f\">as</span><span class=\"token plain\"> np</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> pandas </span><span class=\"token keyword\" style=\"color:#00009f\">as</span><span class=\"token plain\"> pd</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> hamilton</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">function_modifiers </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> extract_columns</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> save_to</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> source</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> check_output</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">TRIPS_SOURCE_COLUMNS </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token string\" style=\"color:#e3116c\">\"event_timestamp\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token string\" style=\"color:#e3116c\">\"driver_id\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token string\" style=\"color:#e3116c\">\"rider_id\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token string\" style=\"color:#e3116c\">\"trip_dist\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token string\" style=\"color:#e3116c\">\"created\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># extract columns allows you to split a dataframe into multiple pandas Series</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@extract_columns</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token operator\" style=\"color:#393A34\">*</span><span class=\"token plain\">TRIPS_SOURCE_COLUMNS</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">trips_raw</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">trips_raw_path</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DataFrame</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Load the driver dataset\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    df </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">read_parquet</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">trips_raw_path</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    df </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> df</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">sort_values</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">by</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"event_timestamp\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> df</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">day_of_week</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">event_timestamp</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Encode day of the week as int\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        event_timestamp</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">dt</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">day_of_week</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"day_of_week\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> index</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">event_timestamp</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">index</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># see how this function depends on the return value of `day_of_week()`</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@check_output</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">data_type</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">int64</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> data_in_range</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> importance</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"warn\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">is_weekend</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">day_of_week</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    weekend </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">where</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">day_of_week </span><span class=\"token operator\" style=\"color:#393A34\">&gt;=</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">5</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">weekend</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"is_weekend\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> index</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">day_of_week</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">index</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">percentile_dist_rolling_3h</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">trip_dist</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> event_timestamp</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Compute the rolling 3H percentile trip dist\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    df </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">concat</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">trip_dist</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> event_timestamp</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> axis</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    agg </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> df</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">rolling</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"3H\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> on</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"event_timestamp\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"trip_dist\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">rank</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">pct</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token boolean\" style=\"color:#36acaa\">True</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">agg</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"percentile_trip_dist_rolling_3h\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> index</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">event_timestamp</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">index</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># this function has many lines, but it simply explicitly assemble columns from the raw</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># source and the computed features.</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># the @save_to decorator allows to easily save this result to a parquet file</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@save_to</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">parquet</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">path</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">source</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"trips_stats_3h_path\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> output_name_</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"save_trips_stats_3h\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">trips_stats_3h</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    event_timestamp</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    driver_id</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    day_of_week</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    is_weekend</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    percentile_dist_rolling_3h</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DataFrame</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Global trip statistics over rolling 3h\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    df </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">concat</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            event_timestamp</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            driver_id</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            day_of_week</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            is_weekend</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            percentile_dist_rolling_3h</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        axis</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> df</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>This code snippet shows broadly the Hamilton approach to defining feature transforms. There is a function that loads a dataframe and exposes its columns (i.e. individual pandas series) for downstream use; typically this could be a call to a database to return a dataframe. Then, features are created by applying functions on these pandas series. Notably, <code>percentile_dist_rolling_3h()</code> takes two pandas series as input, creates a temporary dataframe in the function’s body to apply a rolling window, and returns a new pandas series. Hamilton provides a lot of utilities to avoid code duplication across similar features. You can learn more about them from the examples in the <a href=\"https://hamilton.dagworks.io/en/latest/concepts/decorators-overview/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a>.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-2-be636da9545259bb9a9f22829a67feb6.png\" width=\"1456\" height=\"393\" class=\"img_ev3q\"></p>\n<p>Hamilton pairs so well with Feast because they were both designed around the table/dataframe abstraction. Hamilton enables you to create complex dataframes using functions that are easy to read, test, and document, and you also get <a href=\"https://blog.dagworks.io/p/lineage-hamilton-in-10-minutes-c2b8a944e2e6\" target=\"_blank\" rel=\"noopener noreferrer\">lineage as code</a>! This increased visibility makes it easier for downstream Feast users to trust data definitions and therefore feature quality.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"2-use-hamilton-to-wrangle-feast-definitions\">2. Use Hamilton to wrangle Feast definitions<a href=\"https://tjean.me/blog/feast-hamilton#2-use-hamilton-to-wrangle-feast-definitions\" class=\"hash-link\" aria-label=\"Direct link to 2. Use Hamilton to wrangle Feast definitions\" title=\"Direct link to 2. Use Hamilton to wrangle Feast definitions\">​</a></h3>\n<p>Feast defines its registry objects in Python. For Feast to know about features you need to explicitly register them. At registration, when calling <code>feast apply</code> objects are converted to <a href=\"https://protobuf.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">protobuf</a> and feature object relationships are built. However, the dependencies between feature objects are not made explicit from the Python code definitions that Feast makes your write. To add to this, the Feast CLI is able to read feature object definitions across directories, which inadvertently allows the proliferation of feature object definitions across a codebase. This makes it hard for someone reading the codebase to develop a mental model of these relationships. Considering Feast is essentially a DAG, wrapping object definitions in Hamilton functions can greatly improve readability and reduce the chances of breaking changes.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> feast</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> datetime</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># an entity has no upstream dependencies; it is our join index</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">driver_entity</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Entity</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Feast definition: driver entity\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Entity</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"driver\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> join_keys</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"driver_id\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> value_type</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">ValueType</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">INT64</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># the filesource only needs a file path</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># it could have been hardcoded, but here we pass it as argument because we want to ensure</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># that is it the same value passed as the storage for our feature_transformations.py code</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">driver_hourly_stats_source</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">driver_source_path</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FileSource</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Feast definition: source with hourly stats of driver\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FileSource</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"driver_hourly_stats\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      path</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">driver_source_path</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      timestamp_field</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"event_timestamp\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      created_timestamp_column</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"created\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># the FeatureView is a 1-to-1 with the DataSource, but adds metadata and time-to-live (TTL)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">driver_hourly_stats_fv</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  driver_entity</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Entity</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  driver_hourly_stats_source</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FileSource</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FeatureView</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Feast definition: feature view with hourly stats of driver\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FeatureView</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"driver_hourly_stats\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      entities</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">driver_entity</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      ttl</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">timedelta</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">days</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      schema</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Field</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"conv_rate\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> dtype</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">types</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Float32</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Field</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"acc_rate\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> dtype</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">types</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Float32</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Field</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">              name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"avg_daily_trips\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> dtype</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">types</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Int64</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> description</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"Average daily trips\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      online</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token boolean\" style=\"color:#36acaa\">True</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      source</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">driver_hourly_stats_source</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">      tags</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token string\" style=\"color:#e3116c\">\"team\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"driver_performance\"</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># the FeatureService defines how the data is stored in the online store</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># and how it's retrieved</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">driver_activity_v1_fs</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">   driver_hourly_stats_fv</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FeatureView</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FeatureService</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Feast definition: grouping of features relative to driver activity\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> feast</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">FeatureService</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"driver_activity_v1\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        features</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            driver_hourly_stats_fv</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>The code shows a snippet from the <code>store_definitions.py</code> file from the Feast example in the Hamilton repository. The Hamilton approach to defining functions makes it easy to read dependencies from the code and prevents synchronization issues between Feast feature object definitions when changes are made. As a bonus, Hamilton can automatically generate visualizations that you can associate with your commit or add to your documentation. Below is the DAG generated that registers the appropriate objects with Feast; Hamilton uses the functions defined in <code>store_definitions.py</code> to create this.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-3-4d62f67da4a69ea204afec628c2cde4c.png\" width=\"1456\" height=\"463\" class=\"img_ev3q\"></p>\n<p>As the Feast object graph grows in complexity, it becomes overwhelming to display in its entirety. With the Hamilton <code>driver.what_is_upstream_of()</code> and <code>what_is_downstream_of()</code>, one can quickly answer specific questions about dependencies, by zooming into only what’s relevant to display. For example:</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-4-0b600c977c2df49b909c88a47746ef0f.png\" width=\"724\" height=\"443\" class=\"img_ev3q\"></p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-5-82c0472e62e0070c085707fab46cd731.png\" width=\"934\" height=\"347\" class=\"img_ev3q\"></p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"the-full-hamilton--feast-experience\">The full Hamilton + Feast experience<a href=\"https://tjean.me/blog/feast-hamilton#the-full-hamilton--feast-experience\" class=\"hash-link\" aria-label=\"Direct link to The full Hamilton + Feast experience\" title=\"Direct link to The full Hamilton + Feast experience\">​</a></h2>\n<p>So far, we’ve presented how to use Hamilton to compute the features used in Feast and how to define your Feast objects with Hamilton. By adopting both practices, you can gain visibility over the dataflow from raw data, to feature transformations, to Feast service, effectively extending the contract between data producers and downstream users. If downstream users also use Hamilton to express their data science workflow or power an inference API endpoint, all of the benefits will be further extended!&nbsp;</p>\n<p>This integration allows you to foresee which downstream users will be affected by changes to data transformations code and how. For example:</p>\n<ol>\n<li>\n<p>You could add to your CI/CD pipeline checks for changes in the structure of the Hamilton transformations and Feast object definitions DAGs. If detected one could send an alert or request a review from affected users.</p>\n</li>\n<li>\n<p>Changes to the Hamilton DAG could trigger a purge and feature recompute for the Feast online store to prevent any mismatch between a newly trained model and the already stored features.</p>\n</li>\n</ol>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"build-the-feature-platform-you-need\">Build the feature platform you need<a href=\"https://tjean.me/blog/feast-hamilton#build-the-feature-platform-you-need\" class=\"hash-link\" aria-label=\"Direct link to Build the feature platform you need\" title=\"Direct link to Build the feature platform you need\">​</a></h2>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"step-1-adopt-hamilton\">Step 1: Adopt Hamilton<a href=\"https://tjean.me/blog/feast-hamilton#step-1-adopt-hamilton\" class=\"hash-link\" aria-label=\"Direct link to Step 1: Adopt Hamilton\" title=\"Direct link to Step 1: Adopt Hamilton\">​</a></h3>\n<p>We candidly believe that Hamilton is a great addition, no matter the stage of maturity your feature needs are in. If you have existing code, it usually only takes you 10-25% of the initial development time to refactor code into the Hamiltonian style.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"step-2-feature-store\">Step 2: Feature Store?<a href=\"https://tjean.me/blog/feast-hamilton#step-2-feature-store\" class=\"hash-link\" aria-label=\"Direct link to Step 2: Feature Store?\" title=\"Direct link to Step 2: Feature Store?\">​</a></h3>\n<p>But when to do you use/adopt Feast? That’s a different question. Feast has some compelling features, but it is important to evaluate a team’s needs and capabilities, present and future, before making important infrastructure decisions. Make sure to read this excellent <a href=\"https://medium.com/data-for-ai/feature-pipelines-and-feature-stores-deep-dive-into-system-engineering-and-analytical-tradeoffs-3c208af5e05f\" target=\"_blank\" rel=\"noopener noreferrer\">blog</a> to review the pros and cons of feature stores; as noted in the beginning, a feature store is a complex component to integrate and manage, so you should be confident in your decision before moving forward. There are two important lines of questioning:</p>\n<h4 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"would-your-problems-benefit-from-a-feature-store\">Would your problems benefit from a feature store?<a href=\"https://tjean.me/blog/feast-hamilton#would-your-problems-benefit-from-a-feature-store\" class=\"hash-link\" aria-label=\"Direct link to Would your problems benefit from a feature store?\" title=\"Direct link to Would your problems benefit from a feature store?\">​</a></h4>\n<p>This requires thinking about the nature of the problems you are working on and scoping the pain points you are facing.</p>\n<ul>\n<li>Are you integrating multiple batch/streaming/request data sources? If you are only pulling everything from a data warehouse, you might not need a feature store.</li>\n<li>Are you handling time-series data with complex joins and need point-in-time retrieval? If you are only doing batch predictions with a few joins, you might not need a feature store.</li>\n<li>Are you having duplicate definitions and compute of features across projects?</li>\n</ul>\n<h4 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"what-would-be-the-cost-of-a-maintaining-feature-store\">What would be the cost of a maintaining feature store?<a href=\"https://tjean.me/blog/feast-hamilton#what-would-be-the-cost-of-a-maintaining-feature-store\" class=\"hash-link\" aria-label=\"Direct link to What would be the cost of a maintaining feature store?\" title=\"Direct link to What would be the cost of a maintaining feature store?\">​</a></h4>\n<p>This requires evaluating the efforts and resources that will be needed to be dedicated to setting up and maintaining the feature store.</p>\n<ul>\n<li>How many features and projects in production are you actively managing?</li>\n<li>Do you have a dedicated team to manage infrastructure? You will need ML or data engineering time to migrate and maintain the feature store. Also, data scientists/teams that built the existing features and pipelines will need to ensure migration correctness.</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"some-illustrative-scenarios\">Some Illustrative scenarios<a href=\"https://tjean.me/blog/feast-hamilton#some-illustrative-scenarios\" class=\"hash-link\" aria-label=\"Direct link to Some Illustrative scenarios\" title=\"Direct link to Some Illustrative scenarios\">​</a></h2>\n<p>Now here are a few prototypical scenarios. You might recognize yourself in one, or find yourself between two, but in all cases remember the earlier the you adopt good coding practices and write modular code, the easiest migrating to a feature store is.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"you-are-just-getting-started-with-data-science-and-machine-learning-and-writing-a-proof-of-concepts\">You are just getting started with data science and machine learning and writing a proof of concept(s).<a href=\"https://tjean.me/blog/feast-hamilton#you-are-just-getting-started-with-data-science-and-machine-learning-and-writing-a-proof-of-concepts\" class=\"hash-link\" aria-label=\"Direct link to You are just getting started with data science and machine learning and writing a proof of concept(s).\" title=\"Direct link to You are just getting started with data science and machine learning and writing a proof of concept(s).\">​</a></h3>\n<p>You probably do not need a feature store and its overhead before having any project in production as it would slow you down. You are however, more likely to need tooling around versioning your code and experimentation tracking to store and compare model performance and analysis results. Unlike a feature store, Hamilton is lightweight and can help you write better code that will be easier to version. You can use it from day 1 of any project. Use it to write your analysis and keep track of the results of <code>driver.execute()</code> using <a href=\"https://mlflow.org/docs/latest/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">MLFlow</a>, <a href=\"https://docs.neptune.ai/\" target=\"_blank\" rel=\"noopener noreferrer\">Neptune</a>, or <a href=\"https://docs.wandb.ai/\" target=\"_blank\" rel=\"noopener noreferrer\">Weights&amp;Biases</a> for example.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"you-are-managing-a-few-deployed-projects-serving-predictions-to-users\">You are managing a few deployed projects serving predictions to users.<a href=\"https://tjean.me/blog/feast-hamilton#you-are-managing-a-few-deployed-projects-serving-predictions-to-users\" class=\"hash-link\" aria-label=\"Direct link to You are managing a few deployed projects serving predictions to users.\" title=\"Direct link to You are managing a few deployed projects serving predictions to users.\">​</a></h3>\n<p>This is typically when people start looking at tooling to standardize development across projects to reduce duplicated effort and bring some centralization for people to build off of collectively. After answering the above questions, you might conclude that you need a feature store.</p>\n<p>If you have the resources to migrate to a feature store, the earlier you migrate the less refactoring you have to do. If you currently don’t have the bandwidth, you can still standardize your practice moving forward and progressively refactor code to prepare for a migration.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"you-have-multiple-mature-projects-serving-a-large-number-of-predictions\">You have multiple mature projects serving a large number of predictions.<a href=\"https://tjean.me/blog/feast-hamilton#you-have-multiple-mature-projects-serving-a-large-number-of-predictions\" class=\"hash-link\" aria-label=\"Direct link to You have multiple mature projects serving a large number of predictions.\" title=\"Direct link to You have multiple mature projects serving a large number of predictions.\">​</a></h3>\n<p>As the size and maturity of your data science and ML practice increases, the same logic as the previous section applies, but the cost/benefit ratio can change. The potential benefits are likely evident to you, but refactoring projects powering production services can be risky and very demanding. You should prioritize projects and migrate them one at a time. Adding data validation for data transformations,  Feast ingest, Feast retrieval and model predictions will help prevent breaking changes and diagnose potential problems.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"you-decided-to-migrate-to-feast\">You decided to migrate to Feast<a href=\"https://tjean.me/blog/feast-hamilton#you-decided-to-migrate-to-feast\" class=\"hash-link\" aria-label=\"Direct link to You decided to migrate to Feast\" title=\"Direct link to You decided to migrate to Feast\">​</a></h2>\n<p>To help, we recommend that data scientists/teams responsible for the projects help with the migration. They will need to specify the entities and the timestamp columns for joins. Then, they should define the meaning of features to include in the Feast registry and refactor code to extract the data transformation functions. If you are not already using Hamilton, the refactoring could be more involved.</p>\n<p>With that information, you should be able to write the Feast definitions DAG and register it. If the Feast objects were properly defined, retrieving features from Feast should be equivalent to your previous pipeline on downstream operations.  Then, you should test if you are able to properly materialize/push new data to the online and offline stores.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"you-decided-not-to-migrateadopt-to-feast-yet\">You decided not to migrate/adopt to Feast (yet?)<a href=\"https://tjean.me/blog/feast-hamilton#you-decided-not-to-migrateadopt-to-feast-yet\" class=\"hash-link\" aria-label=\"Direct link to You decided not to migrate/adopt to Feast (yet?)\" title=\"Direct link to You decided not to migrate/adopt to Feast (yet?)\">​</a></h2>\n<p>You might have realized that your projects wouldn’t benefit from Feast or that more important pain points need to be addressed. Here’s a few examples:</p>\n<ul>\n<li>You want lineage → Hamilton’s DAG-based paradigm is ideal to clearly establish the dependencies between transformations and the steps data goes through. See <a href=\"http://www.dagworks.io/\" target=\"_blank\" rel=\"noopener noreferrer\">DAGWorks</a> that takes this product experience further.</li>\n<li>You need to automate tasks or run things on a schedule → look into orchestrators. Hamilton integrates well with any of them, including <a href=\"https://blog.dagworks.io/p/supercharge-your-airflow-dag-with\" target=\"_blank\" rel=\"noopener noreferrer\">Airflow</a>, <a href=\"https://blog.dagworks.io/p/simplify-prefect-workflow-creation\" target=\"_blank\" rel=\"noopener noreferrer\">Prefect</a>, and <a href=\"https://github.com/outerbounds/hamilton-metaflow\" target=\"_blank\" rel=\"noopener noreferrer\">Metaflow</a>.</li>\n<li>You need to gain visibility over production systems failures → look into Hamilton’s data quality capabilities, and other monitoring tools like <a href=\"http://www.dagworks.io/\" target=\"_blank\" rel=\"noopener noreferrer\">DAGWorks</a>.</li>\n<li>You need to share results and collaborate with team members → look into experiment tracking platforms.</li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"final-words\">Final words<a href=\"https://tjean.me/blog/feast-hamilton#final-words\" class=\"hash-link\" aria-label=\"Direct link to Final words\" title=\"Direct link to Final words\">​</a></h2>\n<p>Having Hamilton + Feast in your stack will quickly feel natural. Together, they improve operational efficiency by enabling you to standardize &amp; centralize feature transformations, feature registration, storage and retrieval. So not only will teams be able to create training sets from each others’ features, they will also be able to trace what data produced it and how it was transformed to more easily trust and mitigate data issues. Altogether this will mean that teams will move faster with more confidence.</p>\n<p>Simply fork the example <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/feast\" target=\"_blank\" rel=\"noopener noreferrer\">repository for Feast + Hamilton</a> to get started! It will give you an idea how to: structure your directory, write Hamilton data transformations, define Feast objects, and retrieve features from Feast.</p>\n<p>For users who have questions on the above, please reach out to us on Slack! We’re also more than happy to consult on Feast matters.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"links\">Links<a href=\"https://tjean.me/blog/feast-hamilton#links\" class=\"hash-link\" aria-label=\"Direct link to Links\" title=\"Direct link to Links\">​</a></h2>\n<p>🔗 Join our community on <a href=\"https://hamilton-opensource.slack.com/join/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg#/shared-invite/email\" target=\"_blank\" rel=\"noopener noreferrer\">Slack</a>.</p>\n<p>⭐️ Leave us a star on <a href=\"https://github.com/DAGWorks-Inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>.</p>\n<p>⌨️ Try Hamilton in the browser at <a href=\"https://tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">tryhamilton.dev</a>.</p>\n<p>Integrate Feast and Hamilton: example <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/feast\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repository</a>.</p>\n<p>Read: <a href=\"https://blog.dagworks.io/p/tidy-production-pandas-with-hamilton-3b759a2bf562\" target=\"_blank\" rel=\"noopener noreferrer\">Writing tidy production Pandas code with Hamilton</a> .</p>\n<p>Read: <a href=\"https://madewithml.com/courses/mlops/feature-store/#when-do-i-need-a-feature-store\" target=\"_blank\" rel=\"noopener noreferrer\">An hands-on and succinct introduction to feature stores and Feast by MadeWithML</a>.</p>\n<p>Integrate Hamilton with your favorite macro-orchestrator: <a href=\"https://blog.dagworks.io/publish/post/130538397\" target=\"_blank\" rel=\"noopener noreferrer\">Airflow</a>, <a href=\"https://substack.com/inbox/post/135342200\" target=\"_blank\" rel=\"noopener noreferrer\">Prefect</a>, <a href=\"https://outerbounds.com/blog/developing-scalable-feature-engineering-dags/\" target=\"_blank\" rel=\"noopener noreferrer\">Metaflow</a>.</p>",
            "url": "https://tjean.me/blog/feast-hamilton",
            "title": "Featurization: Integrating Hamilton with Feast",
            "summary": "Are you using Feast? or perhaps you are having trouble with it? Or perhaps you are considering adopting it? In this post, you will learn the operational benefits of using Feast with Hamilton. Feast will act as your “feature store”, while Hamilton will be your in-process “feature processing engine”. We start by providing an overview of Feast, then show how Hamilton fits into the picture. At the end, we give a recipe for where to go from here, depending on where you are in your “feature journey”.",
            "date_modified": "2023-08-02T00:00:00.000Z",
            "author": {
                "name": "Thierry Jean",
                "url": "https://github.com/zilto"
            },
            "tags": [
                "Hamilton",
                "Feast",
                "feature store"
            ]
        },
        {
            "id": "https://tjean.me/blog/prefect-hamilton",
            "content_html": "<p>This post will show you how to use Hamilton with Prefect, two open source projects. At a high level, Prefect orchestrates where/when/what/how code runs (think macro) and Hamilton helps author clean and maintainable code for data transformations (think micro).</p>\n<blockquote>\n<p>crosspost from <a href=\"https://blog.dagworks.io/p/simplify-prefect-workflow-creation\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.dagworks.io/p/simplify-prefect-workflow-creation</a></p>\n</blockquote>\n<blockquote>\n<p>If you are new to Hamilton, we invite you to an interactive overview on <a href=\"http://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">tryhamilton.dev</a>, or this <a href=\"https://towardsdatascience.com/functions-dags-introducing-hamilton-a-microframework-for-dataframe-generation-more-8e34b84efc1d\" target=\"_blank\" rel=\"noopener noreferrer\">post</a>. Hamilton will be discussed at a high level and relevant documentation references will be shared for more details.</p>\n</blockquote>\n<p><a href=\"https://docs.prefect.io/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">Prefect</a> is a modern open source workflow orchestrator that uses Python. With its cloud-provider-agnostic deployment, workspaces, authentication, observability, etc., it can power any data science or machine learning project in production. That said, Prefect is not particularly focused on helping data scientists et al. write clean and maintainable workflow code, leaving users with the following challenges:</p>\n<ol>\n<li>Maintain ever-evolving workflows; what starts simple invariably gets complex.</li>\n<li>Write modular, reusable, and testable code to run within Prefect tasks.</li>\n<li>Track lineage of code and data artifacts that a workflow produces.</li>\n</ol>\n<p>This is where we believe Hamilton can help! <a href=\"https://github.com/dagworks-inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton</a> is a Python micro-framework for writing data transformations. In short, one writes Python functions in a declarative style, which Hamilton parses and connects into a graph based on their names, arguments and type annotations. Specific outputs can be requested and Hamilton will execute the required function path to produce them. By using Prefect and Hamilton, you get a solid toolbox to orchestrate your project over cloud infrastructure, and benefit from easier to reuse and maintain workflow components.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-1247ee8ee1b1c3fd71a209369a8f3340.png\" width=\"1037\" height=\"682\" class=\"img_ev3q\"></p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"write-maintainable-prefect-workflows\">Write maintainable Prefect workflows<a href=\"https://tjean.me/blog/prefect-hamilton#write-maintainable-prefect-workflows\" class=\"hash-link\" aria-label=\"Direct link to Write maintainable Prefect workflows\" title=\"Direct link to Write maintainable Prefect workflows\">​</a></h2>\n<p>A key decision in building a Prefect workflow is “<a href=\"https://docs.prefect.io/2.10.21/concepts/tasks/#tasks-overview\" target=\"_blank\" rel=\"noopener noreferrer\">how big should a task be</a>” and how to divide a project into flows and tasks for execution. Each function decorated with the Prefect <code>@task</code> decorator gains support for caching and retries, and is executed separately, but it also adds to the scheduling and execution overhead (e.g., moving lots of data). With too few tasks, you end up with a monolithic task that takes a lot of time to complete, but probably gains execution efficiency. There is a trade-off between the complexity of the macro Prefect workflow structure and the complexity of the code within each task. In either case, debugging a workflow can be difficult, especially if you are not its author since there is no standard way to write a workflow. More often than not, the initial task structure of the workflow becomes fixed by the engineering team (as they typically own this infrastructure), because refactoring the workflow without breaking things is a real challenge!</p>\n<p>While simpler workflows such as <code>A-&gt;B-&gt;C</code> are desirable, there is an inherent tension between the structure’s simplicity and the amount of code per task. The more code per task, the more difficult it is to identify points of failure, at the trade-off of potential computational efficiencies, but in the case of failures, retries grow in cost with the size of the task.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-1-9ed3893890743774f6bd10545befe524.png\" width=\"1600\" height=\"828\" class=\"img_ev3q\"></p>\n<p>What if you could decouple the complexity of the Prefect workflow from the complexity of the code within tasks? This becomes possible with Hamilton. No matter the size of the tasks’ code, Hamilton enables developers to iterate on the workflow with minimal effort.</p>\n<p>Essentially, you instantiate a <a href=\"https://hamilton.dagworks.io/en/latest/concepts/driver-capabilities.html\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton Driver</a> that loads data transformations from your code modules and automatically builds a Hamilton DAG. By allowing Hamilton to handle the “micro” orchestration of your code within each Prefect task, it becomes easier to write functions at an arbitrary granularity and to inspect in greater detail the behavior of Prefect tasks.</p>\n<p>Specifically the mechanics of the code are:</p>\n<ol>\n<li>Import your function modules</li>\n<li>Pass them to the Hamilton Driver to build the DAG.</li>\n<li>Call <code>Driver.execute()</code> with the outputs you want to execute from the DAG you’ve defined.</li>\n</ol>\n<p>Let’s look at some code that creates a single Prefect task, but uses Hamilton to train and evaluate a ML model:</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> hamilton </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> base</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> driver</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> prefect </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> flow</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> task</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> prefect</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">blocks</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">system </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> JSON</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># import modules containing your dataflow functions</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> train_model</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> evaluate_model</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># use the @task to define Prefect tasks, which adds logging, retries, etc.</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># the function parameters define the config and inputs needed by Hamilton</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@task</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">train_and_evaluate_model_task</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    features_path</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    hamilton_config</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    label</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    feature_set</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    validation_user_ids</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:#36acaa\">None</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Train and evaluate machine learning model\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># define the Driver object with configurations and modules</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dr </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Driver</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        hamilton_config</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        train_model</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># imported data transformation module</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        evaluate_model</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># imported data transformation module</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        adapter</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">SimplePythonGraphAdapter</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DictResult</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># execute the DAG to produce and outputs the requested `final_vars`</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dr</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">execute</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        final_vars</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"save_validation_preds\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"model_results\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        inputs</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            features_path</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">features_path</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            label</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">label</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            feature_set</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">feature_set</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            validation_user_ids</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">validation_user_ids</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># use @flow to define the Prefect flow.</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># the function parameters define the config and inputs needed by all tasks</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># this way, we prevent having constants being hardcoded in the flow or task body</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@flow</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"hamilton-absenteeism-prediction\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    description</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"Predict absenteeism using Hamilton and Prefect\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">absenteeism_prediction_flow</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    features_path</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    feature_set</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token string\" style=\"color:#e3116c\">\"age_zero_mean_unit_variance\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token string\" style=\"color:#e3116c\">\"has_children\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token string\" style=\"color:#e3116c\">\"has_pet\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token string\" style=\"color:#e3116c\">\"is_summer\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token string\" style=\"color:#e3116c\">\"service_time\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    label</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"absenteeism_time_in_hours\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    validation_user_ids</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Predict absenteeism using Hamilton and Prefect\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># ... more tasks</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># load a Prefect Block containing the Hamilton Driver config</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    hamilton_config_block </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> JSON</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"hamilton-train-and-evaluate-config\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># call the Prefect task from the workflow</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    train_and_evaluate_model_task</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        features_path</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">features_path</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        hamilton_config</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">json</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">load</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">hamilton_config_block</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        label</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">label</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        feature_set</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">feature_set</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        validation_user_ids</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">validation_user_ids</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># ... more tasks</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">if</span><span class=\"token plain\"> __name__ </span><span class=\"token operator\" style=\"color:#393A34\">==</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"__main__\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    absenteeism_prediction_flow</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>Now, we didn’t show the Hamilton code here, but the benefits of this approach are:</p>\n<ol>\n<li>\n<p><strong>Unit &amp; integration testing</strong>. Hamilton, through its naming and type annotations requirements, pushes developers to write modular Python code. This results in Python modules well-suited for unit testing. Once your Python code is unit tested, you can develop integration tests to ensure it behaves properly in your Prefect tasks. In contrast, because of the aforementioned task size tradeoff, directly code from a Prefect task can be less trivial. Also, the CI/CD will have to share Prefect’s dependencies.</p>\n</li>\n<li>\n<p><strong>Reuse data transformations</strong>. This approach keeps the data transformations code in Python modules, separated from the Prefect workflow file. This means this code is also runnable <em>outside</em> of Prefect! If you come from the analytics world, it should feel similar to developing and testing SQL queries in an external <code>.sql</code> file, then loading it into a Prefect Block.</p>\n</li>\n<li>\n<p><strong>Reorganize your workflow easily</strong>. The lift required to change your Prefect workflow becomes much lower. If you logically model everything in Hamilton, e.g. an end to end machine learning pipeline, it’s just a matter of determining how much of this Hamilton DAG needs to be computed in each Prefect task. For example, you change the number of tasks from one monolithic Prefect task, to a few, or to many — all that would need to change is what you request from Hamilton since your Hamilton DAG needn’t change at all!</p>\n</li>\n</ol>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"iterative-development-with-hamilton--prefect\">Iterative development with Hamilton &amp; Prefect<a href=\"https://tjean.me/blog/prefect-hamilton#iterative-development-with-hamilton--prefect\" class=\"hash-link\" aria-label=\"Direct link to Iterative development with Hamilton &amp; Prefect\" title=\"Direct link to Iterative development with Hamilton &amp; Prefect\">​</a></h2>\n<p>In most data science projects, it would be impossible to write the DAG of the final system from day 1, as requirements will change. For example, the data science team will want to try different feature sets for their model. Until this list is finalized, it’s probably undesirable to have the feature set in your source code and under version control; configuration files would be preferable.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-2-786113cb01e9982957ab1b7d7a399e6b.png\" width=\"1600\" height=\"625\" class=\"img_ev3q\"></p>\n<p>Prefect will log the configuration for flow and task runs (i.e., the arguments to <code>@flow</code> and <code>@task</code> decorated function) for traceability and reproducibility. Additionally, Prefect has a feature called <a href=\"https://docs.prefect.io/2.10.21/concepts/blocks/\" target=\"_blank\" rel=\"noopener noreferrer\">Blocks</a> that allows configurations, API keys, and connectors to be defined in one place and be reused across projects.  With the right configuration, Prefect allows users to build expressive workflows that easily adapt to changing feature sets, prediction targets, etc.</p>\n<p>Prefect can achieve expressivity through <a href=\"https://www.prefect.io/guide/blog/workflow-orchestration-without-dags/\" target=\"_blank\" rel=\"noopener noreferrer\">dynamic workflows</a>, a type of workflow where the task to be executed are determined during the run. It does so by allowing <code>if/else</code> statements and loops to be collected within the <code>@flow</code> definitions. Since <code>if/else</code> branches only exist as part of the flow’s code, it can become hard to build a mental model of the workflow as it increases in complexity. During the project iterations, some logical branches can become obsolete but remain hard to remove because of unclear function dependencies, ultimately decreasing maintainability.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-3-3202f461a3be73bc3010931860db66a9.png\" width=\"1600\" height=\"772\" class=\"img_ev3q\"></p>\n<p>To achieve expressivity, Hamilton relies on static DAGs. By decorating functions with <code>@config.when()</code>, the user can define logical and specify alternative implementations of a node. By loading the Python modules, the Hamilton Driver is aware of all possible functions (A, B, or even C!) and before allowing execution, resolves all @config points into a static DAG (see figure below). Calls to <code>Driver.execute()</code> operate over this fixed DAG, given the specified configuration. Additionally, Hamilton requires alternative implementations to share a name, for example <code>my_function__a</code>, <code>my_function__b</code>, making the code easy to read and test.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-4-56d5d3126a1de96552954f2b64b0e28e.png\" width=\"1600\" height=\"1038\" class=\"img_ev3q\"></p>\n<p>These features pair really well with Prefect’s configurations and Blocks. For example, one can define the configuration for the Hamilton <code>Driver</code> in a JSON Block and load it within the workflow. Ultimately, this layered approach allows for all the needed expressivity of Prefect workflows while maintaining structural simplicity.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-5-2acf6a3c769ecad782c48c3ffc46b1ce.png\" width=\"1023\" height=\"610\" class=\"img_ev3q\"></p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-6-400c08a4ba4f43f7bb1b48da38358eb8.png\" width=\"1600\" height=\"994\" class=\"img_ev3q\"></p>\n<p>If you work in a hand-off model, this approach promotes a separation of concerns between the data engineers responsible for the Prefect production system and the data scientists in charge of developing business solutions by writing Hamilton code. Having this separation can also improve data consistency and reduce code duplication. For example, a single Prefect workflow can be reused with different Hamilton modules to create different models. Similarly, the same Hamilton data transformations can be reused across different Prefect workflows to power dashboards, API, applications, etc.</p>\n<p>Below are two pictures. The first illustrates the high-level Prefect workflow containing two tasks. The second displays the low-level Hamilton DAG of the Python module <code>evaluate_model</code> imported in the Prefect task <code>train_and_evaluate_model</code>.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-7-ba11c36a743dc2265d0ece5d055133fe.png\" width=\"1600\" height=\"885\" class=\"img_ev3q\"></p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-8-c603096d2cfbd4bbf43cb4e67d605c17.png\" width=\"1384\" height=\"323\" class=\"img_ev3q\"></p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"handling-data-artifacts\">Handling data artifacts<a href=\"https://tjean.me/blog/prefect-hamilton#handling-data-artifacts\" class=\"hash-link\" aria-label=\"Direct link to Handling data artifacts\" title=\"Direct link to Handling data artifacts\">​</a></h2>\n<p>Data science projects produce a large number of data artifacts from datasets, performance evaluations, figures, trained models, etc. The artifacts needed will change over the course of the project life cycle (data exploration, model optimization, production debugging, etc.). In certain scenarios, producing unnecessary or redundant data artifacts can incur significant computation and storage costs.</p>\n<p>Hamilton provides the needed flexibility for data artifact generation through its <a href=\"https://hamilton.dagworks.io/en/latest/reference/api-reference/decorators.html#save-to\" target=\"_blank\" rel=\"noopener noreferrer\">data saver API</a>. By decorating functions with <code>@save_to.*</code> you can toggle the saving of specific artifacts by changing the list of requested outputs passed to <code>Driver.execute()</code>. In the code below, calling <code>validation_predictions_table</code> will return the table whereas calling the <code>output_name_</code> value of <code>save_validation_predictions</code> will return the table and save it to <code>.csv</code>. This pattern is well-suited to work in conjunction with <a href=\"https://docs.prefect.io/2.10.21/concepts/artifacts/#creating-link-artifacts\" target=\"_blank\" rel=\"noopener noreferrer\">Prefect Artifacts</a>, which allow you to tie artifacts from your runs (e.g., a model pushed to S3 or snippets of dataframes) and link them. This selective artifact generation can be managed through the Prefect Block configurations, without editing the Prefect workflow or Hamilton modules.</p>\n<p>Furthermore, the fine-grained Hamilton function graph allows for precise data lineage &amp; provenance. Utility functions <code>what_is_downstream_of()</code> and <code>what_is_upstream_of()</code> help visualize and programmatically explore data dependencies. We point interested readers for more detail <a href=\"https://medium.com/towards-data-science/lineage-hamilton-in-10-minutes-c2b8a944e2e6\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"to-finish--an-example-to-get-started\">To finish &amp; an example to get started<a href=\"https://tjean.me/blog/prefect-hamilton#to-finish--an-example-to-get-started\" class=\"hash-link\" aria-label=\"Direct link to To finish &amp; an example to get started\" title=\"Direct link to To finish &amp; an example to get started\">​</a></h2>\n<p>Hopefully by now we’ve impressed on you that combining Hamilton with Prefect will help you with Prefect’s workflow creation &amp; maintainability challenges.</p>\n<p>To help you get up and running, we have an <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/prefect\" target=\"_blank\" rel=\"noopener noreferrer\">example</a> on how to use Hamilton with Prefect. It should cover all the basics that you need to get started. The README includes how to create a <a href=\"https://www.prefect.io/pricing/\" target=\"_blank\" rel=\"noopener noreferrer\">free tier Prefect Cloud</a> account and run a workflow that uses Hamilton; you can also run prefect locally without using the cloud version and link to appropriate documentation. In the example, we present a small scale machine learning project with a full end-to-end pipeline of creating features and then fitting and evaluating a model.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"we-want-to-hear-from-you\">We want to hear from you!<a href=\"https://tjean.me/blog/prefect-hamilton#we-want-to-hear-from-you\" class=\"hash-link\" aria-label=\"Direct link to We want to hear from you!\" title=\"Direct link to We want to hear from you!\">​</a></h2>\n<p>If you’re excited by any of this, or have strong opinions, drop by our Slack channel / or leave some comments here! Some resources to get you help:</p>\n<p>📣 join our community on <a href=\"https://hamilton-opensource.slack.com/join/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg#/shared-invite/email\" target=\"_blank\" rel=\"noopener noreferrer\">Slack </a> —  we’re more than happy to help answer questions you might have or get you started.</p>\n<p>⭐️ us on <a href=\"https://github.com/DAGWorks-Inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></p>\n<p>📝 leave us an <a href=\"https://github.com/DAGWorks-Inc/hamilton/issues\" target=\"_blank\" rel=\"noopener noreferrer\">issue</a> if you find something</p>\n<p>Other Hamilton posts you might be interested in:</p>\n<ul>\n<li><a href=\"https://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">tryhamilton.dev</a> – an interactive tutorial in your browser!</li>\n<li><a href=\"https://blog.dagworks.io/p/building-a-maintainable-and-modular\" target=\"_blank\" rel=\"noopener noreferrer\">Build a modular LLM stack with Hamilton</a></li>\n<li><a href=\"https://blog.dagworks.io/publish/post/130538397\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton + Airflow</a> (<a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/airflow\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>)</li>\n<li><a href=\"https://outerbounds.com/blog/developing-scalable-feature-engineering-dags/\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton + Metaflow</a> (<a href=\"https://github.com/outerbounds/hamilton-metaflow\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repo</a>)</li>\n<li><a href=\"https://blog.dagworks.io/p/how-to-use-hamilton-with-pandas-in-5-minutes-89f63e5af8f5\" target=\"_blank\" rel=\"noopener noreferrer\">Pandas data transformations in Hamilton in 5 minutes</a></li>\n<li><a href=\"https://blog.dagworks.io/p/lineage-hamilton-in-10-minutes-c2b8a944e2e6\" target=\"_blank\" rel=\"noopener noreferrer\">Lineage + Hamilton in 10 minutes</a></li>\n</ul>",
            "url": "https://tjean.me/blog/prefect-hamilton",
            "title": "Simplify Prefect Workflow Creation and Maintenance with Hamilton",
            "summary": "This post will show you how to use Hamilton with Prefect, two open source projects. At a high level, Prefect orchestrates where/when/what/how code runs (think macro) and Hamilton helps author clean and maintainable code for data transformations (think micro).",
            "date_modified": "2023-07-25T00:00:00.000Z",
            "author": {
                "name": "Thierry Jean",
                "url": "https://github.com/zilto"
            },
            "tags": [
                "Hamilton",
                "Prefect",
                "orchestration"
            ]
        },
        {
            "id": "https://tjean.me/blog/modular-llm",
            "content_html": "<p>In this post, we’re going to share how <a href=\"https://github.com/dagWorks-Inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton</a> can help you write modular and maintainable code for your large language model (LLM) application stack. Hamilton is great for describing any type of <a href=\"https://en.wikipedia.org/wiki/Dataflow\" target=\"_blank\" rel=\"noopener noreferrer\">dataflow</a>, which is exactly what you’re doing when building an LLM powered application. With Hamilton you get strong <a href=\"https://ceur-ws.org/Vol-3306/paper5.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">software maintenance ergonomics</a>, with the added benefit of being able to easily swap and evaluate different providers/implementations for components of your application.</p>\n<blockquote>\n<p>crosspost from <a href=\"https://blog.dagworks.io/p/building-a-maintainable-and-modular\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.dagworks.io/p/building-a-maintainable-and-modular</a></p>\n</blockquote>\n<p>The example we’ll walk through will mirror a typical LLM application workflow you’d run to populate a vector database with some text knowledge. Specifically, we’ll cover pulling data from the web, creating text embeddings (vectors) and pushing them to a vector store.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-ad890e07098815db841b7fb326a6b612.png\" width=\"848\" height=\"980\" class=\"img_ev3q\"></p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"the-llm-application-dataflow\">The LLM application dataflow<a href=\"https://tjean.me/blog/modular-llm#the-llm-application-dataflow\" class=\"hash-link\" aria-label=\"Direct link to The LLM application dataflow\" title=\"Direct link to The LLM application dataflow\">​</a></h2>\n<p>To start, let’s describe what a typical LLM dataflow consists of. The application will receive a small data input (e.g., a text, a command) and act within a larger context (e.g., chat history, documents, state). This data will move through different services (LLM, vector database, document store, etc.) to perform operations, generate new data artifacts, and return final results. Most use cases repeat this flow multiple times while iterating over different inputs.</p>\n<p>Some common operations include:</p>\n<ul>\n<li>Convert text to embeddings</li>\n<li>Store / search / retrieve embeddings</li>\n<li>Find nearest neighbors to an embedding</li>\n<li>Retrieve text for an embedding</li>\n<li>Determine context required to pass into a prompt</li>\n<li>Prompt models with context from relevant text</li>\n<li>Send results to another service (API, database, etc.)</li>\n<li>…</li>\n<li>and chaining them together!</li>\n</ul>\n<p>Now, let’s think about the above in a production context, and imagine a user is unsatisfied with the outputs of your application and you want to find the root cause of the issue. Your application logged both the prompt and the results. Your code allows you to figure out the sequence of operations. Yet, you have no clue where things went wrong and the system produced undesirable output… To mitigate this, we’d argue it’s critical then to have lineage of data artifacts and the code that produces them, so you can debug situations such as these quickly.</p>\n<p>To add to the complexity of your LLM application dataflow, many operations are non-deterministic, meaning you can’t rerun or reverse engineer the operation to reproduce intermediate results. For example, an API call to generate a text or image response will likely be non-reproducible even if you have access to the same input and configuration (you can mitigate some of this with options such as <a href=\"https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature\" target=\"_blank\" rel=\"noopener noreferrer\">temperature</a>). This also extends to certain vector database operations like “find nearest” where the result depends on the objects currently stored in the database. In production settings, it is prohibitive to near impossible to snapshot DB states to make calls reproducible.</p>\n<hr>\n<p>For these reasons, it is important to adopt flexible tooling to create robust dataflows that allow you to:</p>\n<ol>\n<li>plugin in various components easily.</li>\n<li>see how components connect to each other.</li>\n<li>add and customize common production needs like caching, validation, and observability.</li>\n<li>adjust the flow structure to your needs without requiring a strong engineering skill set</li>\n<li>plug into the traditional data processing and machine learning ecosystem.</li>\n</ol>\n<p>In this post we’ll give an overview of how Hamilton fulfills points 1, 2, &amp; 4. We refer the user to our <a href=\"https://hamilton.dagworks.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">documentation</a> for points 3 &amp; 5.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"current-llm-application-development-tooling\">Current LLM application development tooling<a href=\"https://tjean.me/blog/modular-llm#current-llm-application-development-tooling\" class=\"hash-link\" aria-label=\"Direct link to Current LLM application development tooling\" title=\"Direct link to Current LLM application development tooling\">​</a></h2>\n<p>The LLM space is still in its infancy, and the usage patterns and tooling are rapidly evolving. While LLM frameworks can get you started, current options are not production tested; to our knowledge, no established tech companies are using the current popular LLM frameworks in production.</p>\n<p>Don’t get us wrong, some of the tooling out there is great for getting a quick proof of concept up and running! However, we feel they fall short in two specific areas:</p>\n<ol>\n<li><strong>How to model the LLM application’s dataflow</strong>. We strongly believe that the dataflow of “actions” is better modeled as functions, rather than through object oriented classes and lifecycles. Functions are much simpler to reason about, test, and change. Object oriented classes can become quite opaque and impose more mental burden.</li>\n</ol>\n<blockquote>\n<p>When something errors, object-oriented frameworks require you to drill into the objects’ source code to understand it. Whereas with Hamilton functions, a clear dependency lineage tells you where to look and helps you reason about what happened (more on this below)!</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>Customization/extensions</strong>. Unfortunately you need a strong software engineering skill set to modify the current frameworks once you step outside the bounds of what they make “easy” to do. If that’s not an option, this means you can end up stepping outside the framework for a particular piece of custom business logic, which can inadvertently lead you to maintaining more code surface area than if you didn’t use the framework in the first place.</li>\n</ol>\n<p>For more on these two points we point you to threads such as these two (<a href=\"https://news.ycombinator.com/item?id=36645575#36647985\" target=\"_blank\" rel=\"noopener noreferrer\">HackerNews</a>, <a href=\"https://old.reddit.com/r/LangChain/comments/13fcw36/langchain_is_pointless/\" target=\"_blank\" rel=\"noopener noreferrer\">Reddit</a>) that have users speak in more detail.</p>\n<p>While Hamilton is not a complete replacement for current LLM frameworks (e.g. there is no “agent” component), it does have all the building blocks to meet your LLM application needs and both can work in conjunction. If you want a clean, clear, and customizable way to write production code, integrate several LLM stack components, and gain observability over your app, then let’s move onto the next few sections!</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"building-with-hamilton\">Building with Hamilton<a href=\"https://tjean.me/blog/modular-llm#building-with-hamilton\" class=\"hash-link\" aria-label=\"Direct link to Building with Hamilton\" title=\"Direct link to Building with Hamilton\">​</a></h2>\n<p>Hamilton is a declarative micro-framework to describe <a href=\"https://en.wikipedia.org/wiki/Dataflow\" target=\"_blank\" rel=\"noopener noreferrer\">dataflows</a> in Python. It’s not a new framework (3.5+ years old), and has been used for years in production modeling data &amp; machine learning dataflows. Its strength is expressing the flow of data &amp; computation in a way that is straightforward to create and maintain (much like DBT does for SQL), which lends itself very well to support modeling the data &amp; computational needs of LLM applications.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-1-df3d92b60d706042afb8d4cece97ece8.png\" width=\"1037\" height=\"682\" class=\"img_ev3q\"></p>\n<p>The basics of Hamilton are simple, and it can be extended in quite a few ways; you don't have to know Hamilton to get value out of this post, but if you're interested, check out:</p>\n<ul>\n<li><a href=\"https://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">tryhamilton.dev</a> – an interactive tutorial in your browser!</li>\n<li><a href=\"https://towardsdatascience.com/how-to-use-hamilton-with-pandas-in-5-minutes-89f63e5af8f5\" target=\"_blank\" rel=\"noopener noreferrer\">Pandas data transformations in Hamilton in 5 minutes</a></li>\n<li><a href=\"https://blog.dagworks.io/p/lineage-hamilton-in-10-minutes-c2b8a944e2e6\" target=\"_blank\" rel=\"noopener noreferrer\">Lineage + Hamilton in 10 minutes</a></li>\n<li><a href=\"https://blog.dagworks.io/publish/post/130538397\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton + Airflow for production</a></li>\n</ul>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"onto-our-example\">Onto our example<a href=\"https://tjean.me/blog/modular-llm#onto-our-example\" class=\"hash-link\" aria-label=\"Direct link to Onto our example\" title=\"Direct link to Onto our example\">​</a></h2>\n<p>To help set some mental context, picture this. You’re a small data team that is tasked with creating an LLM application to “chat” with your organization’s document. You believe it’s important to evaluate candidate architectures in terms of features, performance profile, licenses, infrastructure requirements, and costs. Ultimately, you know your organization’s primary concern is providing the most relevant results and a great user experience. The best way to assess this is to build a prototype, test different stacks and compare their characteristics and outputs. Then when you transition to production, you’ll want confidence that the system can be maintained and introspected easily, to consistently provide a great user experience.</p>\n<p>With that in mind, in this example, we will implement part of an LLM application, specifically the data ingestion step to index a knowledge base, where we convert text to embeddings and store them in a vector database. We implement this in a modular with a few different services/technologies. The broad steps are:</p>\n<ol>\n<li>Load the <a href=\"https://huggingface.co/datasets/squad\" target=\"_blank\" rel=\"noopener noreferrer\">SQuAD dataset</a> from the HuggingFace Hub. You would swap this out for your corpus of preprocessed documents.</li>\n<li>Embed text entries using the <a href=\"https://docs.cohere.com/reference/embed\" target=\"_blank\" rel=\"noopener noreferrer\">Cohere API</a>, the <a href=\"https://platform.openai.com/docs/api-reference/embeddings\" target=\"_blank\" rel=\"noopener noreferrer\">OpenAI API</a>, or the <a href=\"https://www.sbert.net/examples/applications/computing-embeddings/README.html\" target=\"_blank\" rel=\"noopener noreferrer\">SentenceTransformer library</a>.</li>\n<li>Store embeddings in a vector database, either <a href=\"https://lancedb.github.io/lancedb/\" target=\"_blank\" rel=\"noopener noreferrer\">LanceDB</a>, <a href=\"https://docs.pinecone.io/docs/overview\" target=\"_blank\" rel=\"noopener noreferrer\">Pinecone</a>, or <a href=\"https://weaviate.io/developers/weaviate\" target=\"_blank\" rel=\"noopener noreferrer\">Weaviate</a>.</li>\n</ol>\n<p>If you need to know more about embeddings &amp; search, we direct readers to the following links:</p>\n<ul>\n<li><a href=\"https://weaviate.io/blog/vector-embeddings-explained\" target=\"_blank\" rel=\"noopener noreferrer\">Text embeddings explained - Weaviate</a></li>\n<li><a href=\"https://docs.pinecone.io/docs/semantic-text-search\" target=\"_blank\" rel=\"noopener noreferrer\">How-to conduct semantic search with Pinecone</a></li>\n</ul>\n<hr>\n<p>As we’re walking through this example, it would be useful for you to think about/keep in mind the following:</p>\n<ul>\n<li><strong>Compare what we show you with what you’re doing now</strong>. See how Hamilton enables you to curate and structure a project without needing an explicit LLM-centric framework.</li>\n<li><strong>Project and application structure</strong>. Understand how Hamilton enforces a structure that enables you to build and maintain a modular stack.</li>\n<li><strong>Confidence in iteration &amp; project longevity</strong>. Combining the above two points, Hamilton enables you to more easily maintain an LLM application in production, no matter who authored it.</li>\n</ul>\n<p>Let’s start with a visualization to give you an overview of what we’re talking about:</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-2-4cf0f1fdaafb75366b56c1a6a199f5be.png\" width=\"1600\" height=\"723\" class=\"img_ev3q\"></p>\n<p>Here’s what the LLM Application dataflow would look like when using pinecone with sentence transformers. With Hamilton to understand how things connect is just as simple as <code>display_all_functions()</code> call on the <a href=\"https://hamilton.dagworks.io/en/latest/reference/drivers/Driver/#hamilton.driver.Driver.display_all_functions\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton driver object</a>.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"modular-code\">Modular Code<a href=\"https://tjean.me/blog/modular-llm#modular-code\" class=\"hash-link\" aria-label=\"Direct link to Modular Code\" title=\"Direct link to Modular Code\">​</a></h2>\n<p>Let’s explain the two main ways to implement modular code with Hamilton using our example for context.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"configwhen\">@config.when<a href=\"https://tjean.me/blog/modular-llm#configwhen\" class=\"hash-link\" aria-label=\"Direct link to @config.when\" title=\"Direct link to @config.when\">​</a></h3>\n<p>Hamilton’s focus is on readability. Without explaining what <code>@config.when</code> does, you can probably tell that this is a conditional statement, and only included when the predicate is satisfied. Below you will find the implementation for converting text to embeddings with the OpenAI and the Cohere API.</p>\n<p>Hamilton will recognize two functions as alternative implementations because of the <code>@config.when</code> decorator and the same function name <code>embeddings</code> preceding the double underscore (<code>__cohere</code>, <code>__openai</code>). Their function signatures need not be entirely the same, which means it's easy and clear to adopt different implementations.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">Modularity via @config.when</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># functions from the same file; embedding_module.py</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@config</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">when</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">embedding_service</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"openai\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">embeddings__openai</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    embedding_provider</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> ModuleType</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    text_contents</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    model_name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"text-embedding-ada-002\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">ndarray</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Convert text to vector representations (embeddings) using OpenAI Embeddings API</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    reference: https://github.com/openai/openai-cookbook/blob/main/examples/Get_embeddings.ipynb</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    \"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    response </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> embedding_provider</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Embedding</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">create</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token builtin\">input</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">text_contents</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> engine</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">model_name</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">asarray</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">obj</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"embedding\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> obj </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> response</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"data\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@config</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">when</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">embedding_service</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"cohere\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">embeddings__cohere</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    embedding_provider</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> cohere</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Client</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    text_contents</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    model_name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"embed-english-light-v2.0\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">ndarray</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Convert text to vector representations (embeddings) using Cohere Embed API</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    reference: https://docs.cohere.com/reference/embed</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    \"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    response </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> embedding_provider</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">embed</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        texts</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">text_contents</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        model</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">model_name</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        truncate</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"END\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">asarray</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">embedding</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> embedding </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> response</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">embeddings</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>For this project, it made sense to have all embedding services implemented in the same file with the <code>@config.when</code> decorator since there are only 3 functions per service. However, as the project grows in complexity, functions could be moved to separate modules too, and the next section’s modularity pattern employed instead. Another point to note is that each of these functions is independently unit-testable. Should you have specific needs, it’s straightforward to encapsulate it in the function and test it.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"switching-out-python-modules\">Switching out python modules<a href=\"https://tjean.me/blog/modular-llm#switching-out-python-modules\" class=\"hash-link\" aria-label=\"Direct link to Switching out python modules\" title=\"Direct link to Switching out python modules\">​</a></h3>\n<p>Below you will find the implementation of vector database operations for Pinecone and Weaviate. Note that the snippets are from <code>pinecone_module.py</code> and <code>weaviate_module.py</code> and notice how function signatures resemble and differ.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># functions from pinecone_module.py</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> types </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> ModuleType</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> numpy </span><span class=\"token keyword\" style=\"color:#00009f\">as</span><span class=\"token plain\"> np</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> pinecone</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">client_vector_db</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">vector_db_config</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> ModuleType</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Instantiate Pinecone client using Environment and API key\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    pinecone</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">init</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token operator\" style=\"color:#393A34\">**</span><span class=\"token plain\">vector_db_config</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> pinecone</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ids</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> titles</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> embeddings</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">ndarray</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> metadata</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">dict</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Create valid pinecone objects (index, vector, metadata) tuples for upsert\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">assert</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">ids</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">==</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">titles</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">==</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">embeddings</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    properties </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">title</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">title</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">**</span><span class=\"token plain\">metadata</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> title </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> titles</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    embeddings </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">x</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">tolist</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> x </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> embeddings</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">ids</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> embeddings</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> properties</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">push_to_vector_db</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    client_vector_db</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> ModuleType</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    index_name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    batch_size</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">int</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">100</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">int</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Upsert objects to Pinecone index; return the number of objects inserted\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    pinecone_index </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> pinecone</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Index</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">index_name</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> i </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> </span><span class=\"token builtin\">range</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token number\" style=\"color:#36acaa\">0</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> batch_size</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        i_end </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token builtin\">min</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">i </span><span class=\"token operator\" style=\"color:#393A34\">+</span><span class=\"token plain\"> batch_size</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        pinecone_index</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">upsert</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">vectors</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">i</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\">i_end</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># from weaviate_module.py</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> numpy </span><span class=\"token keyword\" style=\"color:#00009f\">as</span><span class=\"token plain\"> np</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> weaviate</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">client_vector_db</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">vector_db_config</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> weaviate</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Client</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Instantiate Weaviate client using Environment and API key\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    client </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> weaviate</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Client</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token operator\" style=\"color:#393A34\">**</span><span class=\"token plain\">vector_db_config</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">if</span><span class=\"token plain\"> client</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">is_live</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">and</span><span class=\"token plain\"> client</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">is_ready</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> client</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">else</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">raise</span><span class=\"token plain\"> ConnectionError</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"Error creating Weaviate client\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    ids</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> titles</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> text_contents</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> metadata</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">dict</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Create valid weaviate objects that match the defined schema\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">assert</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">ids</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">==</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">titles</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">==</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">text_contents</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">squad_id</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">id_</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> title</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">title</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> context</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">context</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">**</span><span class=\"token plain\">metadata</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> id_</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> title</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> context </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> </span><span class=\"token builtin\">zip</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">ids</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> titles</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> text_contents</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">push_to_vector_db</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    client_vector_db</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> weaviate</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Client</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    class_name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    embeddings</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">ndarray</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    batch_size</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">int</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">100</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">int</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Push batch of data objects with their respective embedding to Weaviate.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    Return number of objects.</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    \"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">assert</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">==</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">embeddings</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">with</span><span class=\"token plain\"> client_vector_db</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">batch</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">batch_size</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">batch_size</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> dynamic</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token boolean\" style=\"color:#36acaa\">True</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">as</span><span class=\"token plain\"> batch</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> i </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> </span><span class=\"token builtin\">range</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            batch</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">add_data_object</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                data_object</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">i</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> class_name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">class_name</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> vector</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">embeddings</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">i</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> </span><span class=\"token builtin\">len</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">data_objects</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>With Hamilton, the dataflow is stitched together using function names and function input arguments. Therefore by sharing function names for similar operations, the two modules are easily interchangeable. Since the LanceDB, Pinecone, and Weaviate implementations reside in separate modules, it reduces the number of dependencies per file and makes them shorter, improving both readability and maintainability. The logic for each implementation is clearly encapsulated in these named functions, so unit testing is straightforward to implement for each respective module. The separate modules reinforce the idea that they shouldn’t be loaded simultaneously. The Hamilton driver will actually throw an error when multiple functions with the same name are found that helps enforce this concept.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"driver-implications\">Driver implications<a href=\"https://tjean.me/blog/modular-llm#driver-implications\" class=\"hash-link\" aria-label=\"Direct link to Driver implications\" title=\"Direct link to Driver implications\">​</a></h2>\n<p>The key part for running Hamilton code is the <code>Driver</code> object found in <code>run.py</code>. Excluding the code for the CLI and some argument parsing, we get:</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">Hamilton Driver</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">config </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    vector_db_config</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">json</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">loads</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">vector_db_config</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    embedding_service</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">embedding_service</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># this triggers config.when() in embedding_module</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    api_key</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">embedding_service_api_key</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    model_name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">model_name</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">dr </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Driver</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    config</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    data_module</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    vector_db_module</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># pinecone_module, weaviate_module or lancedb_module</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    embedding_module</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># contains cohere, openai, and sentence_transformer implementations</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    adapter</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">SimplePythonGraphAdapter</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DictResult</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">dr</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">execute</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    final_vars</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"initialize_vector_db_indices\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"push_to_vector_db\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    inputs</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        class_name</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"SQuADEntry\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>The Hamilton Driver, which orchestrates execution and is what you manipulate your dataflow through, allows modularity through three mechanisms as seen in the above code snippet:</p>\n<ol>\n<li>\n<p><strong>Driver configuration</strong>. this is a dictionary the driver receives at instantiation containing information that should remain constant, such as which API to use, or the embedding service API key. This integrates well with a command plane that can pass JSON or strings (e.g., a Docker container, <a href=\"https://blog.dagworks.io/publish/posts/detail/130538397\" target=\"_blank\" rel=\"noopener noreferrer\">Airflow</a>, <a href=\"https://outerbounds.com/blog/developing-scalable-feature-engineering-dags/\" target=\"_blank\" rel=\"noopener noreferrer\">Metaflow</a>, etc.). Concretely this is where we’d specify swapping out what embedding API to use.</p>\n</li>\n<li>\n<p><strong>Driver modules</strong>. the driver can receive an arbitrary number of independent Python modules to build the dataflow from. Here, the <code>vector_db_module</code> can be swapped in for the desired vector database implementation we’re connecting to. One can also import modules dynamically through <a href=\"https://docs.python.org/3/library/importlib.html#importlib.import_module\" target=\"_blank\" rel=\"noopener noreferrer\">importlib</a>, which can be useful for development vs production contexts, and also enable a configuration driven way to changing the dataflow implementation</p>\n</li>\n<li>\n<p><strong>Driver execution</strong>. The <code>final_vars</code> parameter determines what output should be returned. You do not need to restructure your code to change what output you want to get. Let’s take the case of wanting to debug something within our dataflow, it is possible to request the output of any function by adding its name to <code>final_vars</code>. For example, if you have some intermediate output to debug, it’s easy to request it, or stop execution at that spot entirely. Note, the driver can receive inputs and overrides values when calling <code>execute()</code>; in the code above, the <code>class_name</code> is an execution time input that indicates the embedding object we want to create and where to store it in our vector database.</p>\n</li>\n</ol>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"modularity-summary\">Modularity Summary<a href=\"https://tjean.me/blog/modular-llm#modularity-summary\" class=\"hash-link\" aria-label=\"Direct link to Modularity Summary\" title=\"Direct link to Modularity Summary\">​</a></h3>\n<p>In Hamilton, the key to enable swappable components is to:</p>\n<ol>\n<li>define functions with effectively the same name and then,</li>\n<li>annotate them with <code>@config.when</code> and choose which one to use via configuration passed to the driver, or,</li>\n<li>put them in separate python modules and pass in the desired module to the driver.</li>\n</ol>\n<p>So we’ve just shown how you can plugin, swap, and call various LLM components with Hamilton. We didn’t need to explain what an object oriented hierarchy is, nor require you to have extensive software engineering experience to follow (we hope!). To accomplish this, we just had to match function names, and their output types. We think this way of writing and modularizing code is therefore more accessible than current LLM frameworks permit.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"hamilton-code-in-practice\">Hamilton code in practice<a href=\"https://tjean.me/blog/modular-llm#hamilton-code-in-practice\" class=\"hash-link\" aria-label=\"Direct link to Hamilton code in practice\" title=\"Direct link to Hamilton code in practice\">​</a></h2>\n<p>To add to our claims, here a few practical implications of writing Hamilton code for LLM workflows that we’ve observed:</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"cicd\">CI/CD<a href=\"https://tjean.me/blog/modular-llm#cicd\" class=\"hash-link\" aria-label=\"Direct link to CI/CD\" title=\"Direct link to CI/CD\">​</a></h3>\n<p>This ability to swap out modules/<code>@config.when</code> also means that integration testing in a CI system is straightforward to think about, since you have the flexibility and freedom to swap/isolate parts of the dataflow as desired.</p>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"collaboration\">Collaboration<a href=\"https://tjean.me/blog/modular-llm#collaboration\" class=\"hash-link\" aria-label=\"Direct link to Collaboration\" title=\"Direct link to Collaboration\">​</a></h3>\n<ol>\n<li>\n<p>The modularity Hamilton enables can allow one to mirror cross team boundaries easily. The function names &amp; their output types become a contract, which ensures one can make surgical changes and be confident in the change, as well as have the visibility into downstream dependencies with Hamilton’s <a href=\"https://blog.dagworks.io/p/lineage-hamilton-in-10-minutes-c2b8a944e2e6\" target=\"_blank\" rel=\"noopener noreferrer\">visualization and lineage features</a> (like the initial visualization we saw). For example, it’s clear how to interact and consume from the vector database.</p>\n</li>\n<li>\n<p>Code changes are simpler to review, because the flow is defined by declarative functions. The changes are self-contained; because there is no object oriented hierarchy to learn, just a function to modify.  Anything “custom” is de facto supported by Hamilton.</p>\n</li>\n</ol>\n<h3 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"debugging\">Debugging<a href=\"https://tjean.me/blog/modular-llm#debugging\" class=\"hash-link\" aria-label=\"Direct link to Debugging\" title=\"Direct link to Debugging\">​</a></h3>\n<p>When there is an error with Hamilton, it’s clear as to what the code it maps to is, and because of how the function is defined, one knows where to place it within the dataflow.</p>\n<p>Take the simple example of the embeddings function using cohere. If there was a time out, or error in parsing the response it would be clear that it maps to this code, and from the function definition you’d know where in the flow it fits.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">Cohere embedding function</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@config</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">when</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">embedding_service</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"cohere\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">embeddings__cohere</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    embedding_provider</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> cohere</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Client</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    text_contents</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    model_name</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"embed-english-light-v2.0\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> </span><span class=\"token builtin\">list</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">ndarray</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Convert text to vector representations (embeddings) using Cohere Embed API</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    reference: https://docs.cohere.com/reference/embed</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">    \"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    response </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> embedding_provider</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">embed</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        texts</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">text_contents</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        model</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">model_name</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        truncate</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"END\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\">np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">asarray</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">embedding</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:#00009f\">for</span><span class=\"token plain\"> embedding </span><span class=\"token keyword\" style=\"color:#00009f\">in</span><span class=\"token plain\"> response</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">embeddings</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-3-890f3b0a5cad95229ee3c5cd2e25d985.png\" width=\"1425\" height=\"443\" class=\"img_ev3q\"></p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"tips-for-creating-a-modular-llm-stack\">Tips for creating a modular LLM stack<a href=\"https://tjean.me/blog/modular-llm#tips-for-creating-a-modular-llm-stack\" class=\"hash-link\" aria-label=\"Direct link to Tips for creating a modular LLM stack\" title=\"Direct link to Tips for creating a modular LLM stack\">​</a></h2>\n<p>Before we finish, here are some ideas to guide you through building your application. Some decisions might not have an obvious best choice, but having the right approach to modularity will allow you to efficiently iterate as requirements evolve.</p>\n<ol>\n<li>\n<p>Before writing any code, draw a DAG of the logical steps of your workflow. This sets the basis for defining common steps and interfaces that are not service-specific.</p>\n</li>\n<li>\n<p>Identify steps that could be swapped. By being purposeful with configuration points, you will reduce risks of <a href=\"https://refactoring.guru/smells/speculative-generality\" target=\"_blank\" rel=\"noopener noreferrer\">speculative generality</a>. Concretely, this would result in functions with less arguments, default values, and grouped into thematic modules.</p>\n</li>\n<li>\n<p>Chunk parts of your dataflow into modules with few dependencies, if relevant. This will lead to shorter Python files with fewer package dependencies, improved readability and maintainability. Hamilton is indifferent and can build its DAG from multiple modules.</p>\n</li>\n</ol>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"to-close--future-directions\">To close &amp; future directions<a href=\"https://tjean.me/blog/modular-llm#to-close--future-directions\" class=\"hash-link\" aria-label=\"Direct link to To close &amp; future directions\" title=\"Direct link to To close &amp; future directions\">​</a></h2>\n<p>Thanks for getting this far. We believe that Hamilton has a part to play in helping everyone express their dataflows, and LLM applications are just one use case! To summarize our messaging in this post can be boiled down to:</p>\n<ol>\n<li>\n<p>It is useful to conceive of LLM applications as dataflows, and are therefore a great fit for using Hamilton.</p>\n</li>\n<li>\n<p>Object-centric LLM frameworks can be opaque and hard to extend and maintain for your production needs. Instead, one should write their own integrations with Hamilton’s straightforward declarative style. Doing so will improve your code’s transparency and maintainability, with clear testable functions, clear mapping of runtime errors to functions, and built-in visualization of your dataflow.</p>\n</li>\n<li>\n<p>The modularity prescribed by using Hamilton will make collaboration more efficient and provide you with the requisite flexibility to modify and change your LLM workflows at the speed at which the field is moving.</p>\n</li>\n</ol>\n<p>We now invite you to play around with, try, and modify the full example for yourselves <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/LLM_Workflows/modular_llm_stack\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. There is a <code>README</code> that will explain the commands to run and get started. Otherwise, we are working on making the Hamilton + LLM Application experience even better by thinking about the following:</p>\n<ol>\n<li>\n<p><strong>Agents</strong>. Can we provide the same level of visibility to agents that we have for regular Hamilton dataflows?</p>\n</li>\n<li>\n<p><strong>Parallelization</strong>. How can we make it simpler to express running a dataflow over a list of documents for example. See this work in progress PR for what we mean.</p>\n</li>\n<li>\n<p><strong>Plugins for caching and observability</strong>. One can already implement a custom caching and observability solution on top of Hamilton. We’re working on providing more standard options out of the box for common components, e.g. redis.</p>\n</li>\n<li>\n<p><strong>A user contributed dataflows section</strong>. We see the possibility to standardize on common names for specific LLM application use cases. In which case we can start to aggregate Hamilton dataflows, and allow people to pull them down for their needs.</p>\n</li>\n</ol>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"we-want-to-hear-from-you\">We want to hear from you!<a href=\"https://tjean.me/blog/modular-llm#we-want-to-hear-from-you\" class=\"hash-link\" aria-label=\"Direct link to We want to hear from you!\" title=\"Direct link to We want to hear from you!\">​</a></h2>\n<p>If you’re excited by any of this, or have strong opinions, drop by our Slack channel / or leave some comments here! Some resources to get you help:</p>\n<p>📣 join our community on <a href=\"https://hamilton-opensource.slack.com/join/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg#/shared-invite/email\" target=\"_blank\" rel=\"noopener noreferrer\">Slack</a>  —  we’re more than happy to help answer questions you might have or get you started.</p>\n<p>⭐️ us on <a href=\"https://github.com/DAGWorks-Inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></p>\n<p>📝 leave us an <a href=\"https://github.com/DAGWorks-Inc/hamilton/issues\" target=\"_blank\" rel=\"noopener noreferrer\">issue</a> if you find something</p>\n<p>Other Hamilton posts you might be interested in:</p>\n<ul>\n<li><a href=\"https://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">tryhamilton.dev</a> – an interactive tutorial in your browser!</li>\n<li><a href=\"https://blog.dagworks.io/p/how-to-use-hamilton-with-pandas-in-5-minutes-89f63e5af8f5\" target=\"_blank\" rel=\"noopener noreferrer\">Pandas data transformations in Hamilton in 5 minutes</a></li>\n<li><a href=\"https://blog.dagworks.io/p/lineage-hamilton-in-10-minutes-c2b8a944e2e6\" target=\"_blank\" rel=\"noopener noreferrer\">Lineage + Hamilton in 10 minutes</a></li>\n<li><a href=\"https://blog.dagworks.io/publish/post/130538397\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton + Airflow for production</a></li>\n</ul>",
            "url": "https://tjean.me/blog/modular-llm",
            "title": "Building a maintainable and modular LLM application stack with Hamilton",
            "summary": "In this post, we’re going to share how Hamilton can help you write modular and maintainable code for your large language model (LLM) application stack. Hamilton is great for describing any type of dataflow, which is exactly what you’re doing when building an LLM powered application. With Hamilton you get strong software maintenance ergonomics, with the added benefit of being able to easily swap and evaluate different providers/implementations for components of your application.",
            "date_modified": "2023-07-11T00:00:00.000Z",
            "author": {
                "name": "Thierry Jean",
                "url": "https://github.com/zilto"
            },
            "tags": [
                "Hamilton",
                "vector search",
                "OpenAI",
                "Cohere",
                "Weaviate",
                "Pinecone",
                "LanceDB"
            ]
        },
        {
            "id": "https://tjean.me/blog/airflow-hamilton",
            "content_html": "<p>This post walks you through the benefits of having <a href=\"https://github.com/dagworks-inc/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton</a> and <a href=\"https://airflow.apache.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Airflow</a> <a href=\"https://en.wikipedia.org/wiki/Directed_acyclic_graph\" target=\"_blank\" rel=\"noopener noreferrer\">directed acyclic graphs</a> (DAGs) work in tandem. Airflow is responsible for orchestration (think macro) and Hamilton helps author clean and maintainable data transformations (think micro). The reason you can run Hamilton with Airflow, is that Hamilton is just a library with a small dependency footprint, so one can get started with Hamilton in no time! For those that are unfamiliar with Hamilton, we point you to an interactive overview on <a href=\"https://tjean.me/blog/tryhamilton.dev\">tryhamilton.dev</a>. Otherwise we will talk about Hamilton at a high level and point to reference documentation for more details.\n<img decoding=\"async\" loading=\"lazy\" alt=\"Apache Airflow Banner\" src=\"https://tjean.me/assets/images/airflow-banner-a4b15716dcd602dfac2713b49041e9f4.png\" width=\"848\" height=\"245\" class=\"img_ev3q\"></p>\n<blockquote>\n<p>crosspost from <a href=\"https://blog.dagworks.io/p/supercharge-your-airflow-dag-with\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.dagworks.io/p/supercharge-your-airflow-dag-with</a></p>\n</blockquote>\n<p>Airflow is the industry standard to orchestrate data pipelines. It powers all sorts of data initiatives including ETL, ML pipelines and BI. Since its inception in 2014, Airflow users have faced certain rough edges with regards to authoring and maintaining data pipelines:</p>\n<ul>\n<li>Maintainably managing the evolution of workflows; what starts simple can invariably get complex.</li>\n<li>Writing modular, reusable, and testable code that runs within an Airflow task.</li>\n<li>Tracking lineage of code and data artifacts that an Airflow DAG produces.</li>\n</ul>\n<p>This is where we believe Hamilton can help! Hamilton is a Python micro-framework for writing data transformations. In short, one writes python functions in a “declarative” style, which Hamilton parses and connects into a graph based on their names, arguments and type annotations. Specific outputs can be requested and Hamilton will execute the required function path to produce them. Because it doesn’t provide macro orchestrating capabilities, it pairs nicely with Airflow by helping data professionals write cleaner code and more reusable code for Airflow DAGs.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Hamilton 101\" src=\"https://tjean.me/assets/images/hamilton_101-ba2ed21e69fe703672710cd2e2fd67aa.png\" width=\"848\" height=\"558\" class=\"img_ev3q\"></p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"write-maintainable-airflow-dags\">Write maintainable Airflow DAGs<a href=\"https://tjean.me/blog/airflow-hamilton#write-maintainable-airflow-dags\" class=\"hash-link\" aria-label=\"Direct link to Write maintainable Airflow DAGs\" title=\"Direct link to Write maintainable Airflow DAGs\">​</a></h2>\n<p>A common use of Airflow is to help with machine learning/data science. Running such workloads in production often requires complex workflows. A necessary design decision is determining how to break up the workflow into Airflow tasks. Create too many and you increase scheduling and execution overhead (e.g. moving lots of data), create too few and you have monolithic tasks that can take a while to run, but probably are more efficient. The trade-off here is Airflow DAG complexity versus code complexity  within each of the tasks. This makes debugging and reasoning about the workflow harder, especially if you did not author the initial Airflow DAG. More often than not, the initial task structure of the Airflow DAG becomes fixed, because refactoring the task code becomes prohibitive!</p>\n<p>While simpler DAGs such as A-&gt;B-&gt;C are desirable, there is an inherent tension between the structure’s simplicity and the amount of code per task. The more code per task, the more difficult it is to identify points of failure, at the trade-off of potential computational efficiencies, but in the case of failures, retries grow in cost with the “size” of the task.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Airflow node size\" src=\"https://tjean.me/assets/images/airflow_node_size-2956607b2f928359776e30df65514aca.png\" width=\"848\" height=\"435\" class=\"img_ev3q\"></p>\n<p>Instead, what if you could simultaneously wrangle the complexity within an Airflow task, no matter the size of code within it, and gain the flexibility to easily change the Airflow DAG shape with minimal effort? This is where Hamilton comes in.</p>\n<p>With Hamilton you can replace the code within each Airflow task with a Hamilton DAG, where Hamilton handles the “micro” orchestration of the code within the task. Note: Hamilton actually enables you to logically model everything that you’d want an Airflow DAG to do. More on that below.</p>\n<p>To use Hamilton, you load a Python module that contains your Hamilton functions, instantiate a <a href=\"https://hamilton.dagworks.io/en/latest/concepts/driver-capabilities/\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton Driver</a> and execute a Hamilton DAG within an Airflow task in a few lines of code. By using Hamilton, you can write your data transformation at an arbitrary granularity, allowing you to inspect in greater details what each Airflow task is doing.</p>\n<p>Specifically the mechanics of the code are:</p>\n<ol>\n<li>Import your function modules</li>\n<li>Pass them to the Hamilton driver to build the DAG.</li>\n<li>Then, call Driver.execute() with the outputs you want to execute from the DAG you’ve defined.</li>\n</ol>\n<p>Let’s look at some code that create a single node Airflow DAG but uses Hamilton to train and evaluate a ML model:</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">Airflow DAG with nested Hamilton</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> airflow</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">decorators </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> dag</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> task</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> airflow</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">operators</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">python </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> get_current_context</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># set the Airflow DAG parameters. This will appear in the Airflow UI. </span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">DEFAULT_DAG_PARAMS </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    label</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"absenteeism_time_in_hours\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    feature_set</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token string\" style=\"color:#e3116c\">\"age_zero_mean_unit_variance\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token string\" style=\"color:#e3116c\">\"has_children\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token string\" style=\"color:#e3116c\">\"has_pet\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token string\" style=\"color:#e3116c\">\"is_summer\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">          </span><span class=\"token string\" style=\"color:#e3116c\">\"service_time\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    h_train_and_evaluate</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># config for the Hamilton Driver</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@dag</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    dag_id</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"hamilton-absenteeism-prediction\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    description</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"Predict absenteeism using Hamilton and Airflow\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    start_date</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">datetime</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token number\" style=\"color:#36acaa\">2023</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">6</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:#36acaa\">18</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    params</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">DEFAULT_DAG_PARAMS</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># pass the default params to the Airflow DAG</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">absenteeism_prediction_dag</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Predict absenteeism using Hamilton and Airflow\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># Below we have a single Airflow task that uses 2 Python modules (evaluate_model, train_model).</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># Both are loaded into the Hamilton driver in a single Airflow task, reducing the number of</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># Airflow task and preventing having to move data between the two steps. However, it remains</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># beneficial to separate the code into 2 modules since training and evaluation are independent and</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># might be reused in separate contexts.</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@task</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">train_and_evaluate_model</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">features_path</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\">str</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Train and evaluate a machine learning model\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> evaluate_model  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># user defined function module</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> train_model  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># user defined function module</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> hamilton </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> base</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> driver</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        context </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> get_current_context</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        PARAMS </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> context</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"params\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># get the Airflow runtime config</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        hamilton_config </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> PARAMS</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"h_train_and_evaluate_model\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        dr </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Driver</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            hamilton_config</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            train_model</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            evaluate_model</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># pass function modules to the Hamilton driver</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            adapter</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">SimplePythonGraphAdapter</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">base</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DictResult</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        results </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> dr</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">execute</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># `final_vars` specifies Hamilton functions results we want as outputs.</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            final_vars</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"save_validation_preds\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"model_results\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            inputs</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                </span><span class=\"token string\" style=\"color:#e3116c\">\"features_path\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> features_path</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># value retrieved from Airflow XCom</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                </span><span class=\"token string\" style=\"color:#e3116c\">\"label\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> PARAMS</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"label\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">                </span><span class=\"token string\" style=\"color:#e3116c\">\"feature_set\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> PARAMS</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"feature_set\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">            </span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">        </span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>Now, we didn’t show the Hamilton code here, but the benefits of this approach are:</p>\n<ol>\n<li>\n<p><strong>Unit &amp; integration testing.</strong> Hamilton, through its naming and type annotations requirements, pushes developers to write modular Python code. This results in Python modules well-suited for unit testing. Once your Python code is unit tested, you can develop integration tests to ensure it behaves properly in your Airflow tasks. In contrast, testing code contained in an Airflow task is less trivial, especially in CI/CD settings, since it requires having access to an Airflow environment.</p>\n</li>\n<li>\n<p><strong>Reuse data transformations.</strong> This approach keeps the data transformations code in Python modules, separated from the Airflow DAG file. This means this code is also runnable outside of Airflow! If you come from the analytics world, it should feel similar to developing and testing SQL queries in an external .sql file, then loading it into your Airflow Postgres operators.</p>\n</li>\n<li>\n<p><strong>Reorganize your Airflow DAG easily.</strong> The lift required to change your Airflow DAG is now much lower. If you logically model everything in Hamilton, e.g. an end to end machine learning pipeline, it’s just a matter of determining how much of this Hamilton DAG needs to be computed in each Airflow task. For example, you change the number of tasks from one monolithic Airflow task, to a few, or to many — all that would need to change is what you request from Hamilton since your Hamilton DAG needn’t change at all!</p>\n</li>\n</ol>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"iterative-development-with-hamilton--airflow\">Iterative development with Hamilton &amp; Airflow<a href=\"https://tjean.me/blog/airflow-hamilton#iterative-development-with-hamilton--airflow\" class=\"hash-link\" aria-label=\"Direct link to Iterative development with Hamilton &amp; Airflow\" title=\"Direct link to Iterative development with Hamilton &amp; Airflow\">​</a></h2>\n<p>In most data science projects, it would be impossible to write the DAG of the final system from day 1 as requirements will change. For example, the data science team might want to try different feature sets for their model. Until the list is set and finalized, it is probably undesirable to have the feature set in your source code and under version control; configuration files would be preferable.</p>\n<p>Airflow supports default and runtime DAG configurations and will log these settings to make every DAG run reproducible. However, adding configurable behaviors will require committing adding conditional statements and complexity to your Airflow task code. This code might become obsolete during the project or only be useful in particular scenarios, ultimately decreasing your DAGs readability.</p>\n<p>In contrast, Hamilton can use Airflow’s runtime configuration to execute different data transformations from the function graph on the fly. This layered approach can greatly increase the expressivity of Airflow DAGs while maintaining structural simplicity. Alternatively, Airflow can <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/howto/dynamic-dag-generation.html\" target=\"_blank\" rel=\"noopener noreferrer\">dynamically generate new DAGs</a> from configurations, but this could decrease observability and some of these features remain experimental.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Airflow Config UI\" src=\"https://tjean.me/assets/images/image-53d6dc22cf363464dd99ac03cf8f7ef1.png\" width=\"1456\" height=\"1373\" class=\"img_ev3q\"></p>\n<p>If you work in a hand-off model, this approach promotes a separation of concerns between the data engineers responsible for the Airflow production system and the data scientists in charge of developing business solutions by writing Hamilton code. Having this separation can also improve data consistency and reduce code duplication. For example, a single Airflow DAG can be reused with different Hamilton modules to create different models. Similarly, the same Hamilton data transformations can be reused across different Airflow DAGs to power dashboards, API, applications, etc.</p>\n<p>Below are two pictures. The first illustrates the high-level Airflow DAG containing 2 nodes. The second displays the low-level Hamilton DAG of the Python module <code>evaluate_model</code> imported in the Airflow task <code>train_and_evaluate_model</code>.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Airflow DAG UI\" src=\"https://tjean.me/assets/images/image-1-c2b9d97be0920e0f74387b65112d5b2e.png\" width=\"1245\" height=\"470\" class=\"img_ev3q\"></p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Hamilton DAG viz\" src=\"https://tjean.me/assets/images/image-2-48bbf5b6fda565bf41061c3cb61f959d.png\" width=\"1456\" height=\"340\" class=\"img_ev3q\"></p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"handling-data-artifacts\">Handling data artifacts<a href=\"https://tjean.me/blog/airflow-hamilton#handling-data-artifacts\" class=\"hash-link\" aria-label=\"Direct link to Handling data artifacts\" title=\"Direct link to Handling data artifacts\">​</a></h2>\n<p>Data science projects produce a large number of data artifacts from datasets, performance evaluations, figures, trained models, etc. The artifacts needed will change over the course of the project life cycle (data exploration, model optimization, production debugging, etc.). This is a problem for Airflow since removing a task from a DAG will delete its metadata history and break the artifact lineage. In certain scenarios, producing unnecessary or redundant data artifacts can incur significant computation and storage costs.</p>\n<p>Hamilton can provide the needed flexibility for data artifact generation through its <a href=\"https://hamilton.dagworks.io/en/latest/reference/decorators/save_to/\" target=\"_blank\" rel=\"noopener noreferrer\">data saver API</a>. Functions decorated with <code>@save_to.*</code> add the possibility to store their output, one need only to request this functionality via <code>Driver.execute()</code>. In the code below, calling <code>validation_predictions_table</code> will return the table whereas calling the <code>output_name_</code> value of <code>save_validation_predictions</code> will return the table and save it to <code>.csv</code>.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockTitle_Ktv7\">Saving data artifacts with Hamilton</div><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># from the function  module</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">@save_to</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:#393A34\">csv</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">path</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\">source</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"pred_path\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> output_name_</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token string\" style=\"color:#e3116c\">\"save_validation_predictions\"</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">validation_predictions_table</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">y_validation</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">ndarray</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> val_pred</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> np</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">ndarray</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DataFrame</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Create a table with the model's predictions on the validation set\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">DataFrame</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token string\" style=\"color:#e3116c\">\"y_validation\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> y_validation</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"val_pred\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> val_pred</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># from the main process</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">results </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> dr</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">execute</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  final_vars</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token plain\"> </span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token string\" style=\"color:#e3116c\">\"validation_predictions_table\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># the function name</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token string\" style=\"color:#e3116c\">\"save_validation_predictions\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># the decorator `output_name_` argument</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>This added flexibility allows users to easily toggle the artifacts generated and it can be done directly through the Airflow runtime configuration, without editing the Airflow DAG or Hamilton modules.</p>\n<p>Furthermore, the fine-grained Hamilton function graph allows for precise data lineage &amp; provenance. Utility functions <code>what_is_downstream_of()</code> and <code>what_is_upstream_of()</code> help visualize and programmatically explore data dependencies. Hamilton co-creator, Stefan Krawczyk, goes into detail <a href=\"https://blog.dagworks.io/p/lineage-hamilton-in-10-minutes-c2b8a944e2e6\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"an-example-to-get-started\">An example to get started<a href=\"https://tjean.me/blog/airflow-hamilton#an-example-to-get-started\" class=\"hash-link\" aria-label=\"Direct link to An example to get started\" title=\"Direct link to An example to get started\">​</a></h2>\n<p>To help you get up and running, we have an example on how to use Hamilton with Airflow in the Hamilton GitHub repository (find it <a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/airflow\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>). The README will indicate how to set up Airflow with Docker. The example contains two Airflow DAGs, one showcasing a basic Hamilton “how-to” and the other a more complete ML project example. If you have questions or need help - please join our <a href=\"https://hamilton-opensource.slack.com/join/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg#/shared-invite/email\" target=\"_blank\" rel=\"noopener noreferrer\">Slack</a>.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Example Structure\" src=\"https://tjean.me/assets/images/image-3-84658da96c45cd6eebb442571fe378c9.png\" width=\"622\" height=\"1142\" class=\"img_ev3q\"></p>\n<p>Otherwise, to learn more about Hamilton’s features and functionality, please consult the documentation.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"references\">References<a href=\"https://tjean.me/blog/airflow-hamilton#references\" class=\"hash-link\" aria-label=\"Direct link to References\" title=\"Direct link to References\">​</a></h2>\n<ul>\n<li><a href=\"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/airflow\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton + Airflow example</a></li>\n<li><a href=\"https://hamilton.dagworks.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton Documentation</a></li>\n<li><a href=\"https://www.tryhamilton.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">tryhamilton.dev</a> — an interactive way to learn more about Hamilton.</li>\n<li>For another orchestration system integrating with Hamilton, you can checkout <a href=\"https://outerbounds.com/blog/developing-scalable-feature-engineering-dags/\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton + Metaflow</a>.</li>\n<li><a href=\"https://hamilton-opensource.slack.com/join/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg#/shared-invite/email\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton Slack community</a></li>\n</ul>",
            "url": "https://tjean.me/blog/airflow-hamilton",
            "title": "Simplify Airflow DAG Creation and Maintenance with Hamilton",
            "summary": "This post walks you through the benefits of having Hamilton and Airflow directed acyclic graphs (DAGs) work in tandem. Airflow is responsible for orchestration (think macro) and Hamilton helps author clean and maintainable data transformations (think micro). The reason you can run Hamilton with Airflow, is that Hamilton is just a library with a small dependency footprint, so one can get started with Hamilton in no time! For those that are unfamiliar with Hamilton, we point you to an interactive overview on tryhamilton.dev. Otherwise we will talk about Hamilton at a high level and point to reference documentation for more details.",
            "date_modified": "2023-06-28T00:00:00.000Z",
            "author": {
                "name": "Thierry Jean",
                "url": "https://github.com/zilto"
            },
            "tags": [
                "Hamilton",
                "Airflow",
                "orchestration"
            ]
        },
        {
            "id": "https://tjean.me/blog/perks-of-hamilton",
            "content_html": "<p><a href=\"https://github.com/stitchfix/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">Hamilton</a> is an open-source Python microframework developed at <a href=\"https://www.stitchfix.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Stitch Fix</a>. It automagically organizes Python functions into a <em>directed acyclic graph</em> (DAG) from their name and type annotations. It was originally created to facilitate working with tabular datasets containing hundreds of columns, but it’s general enough to enable many data science or machine learning (ML) scenarios.</p>\n<blockquote>\n<p>crosspost from <a href=\"https://medium.com/@thijean/the-perks-of-creating-dataflows-with-hamilton-36e8c56dd2a\" target=\"_blank\" rel=\"noopener noreferrer\">https://medium.com/@thijean/the-perks-of-creating-dataflows-with-hamilton-36e8c56dd2a</a></p>\n</blockquote>\n<p>Over the last year, I used Hamilton both in academic research to build forecast models from smartphone sensor data, and in industry to implement dynamic bidding strategies for an ad exchange. Amongst a sea of awesome open-source tools, Hamilton happened to neatly suit my needs. Below, I will give a brief overview of Hamilton, and break down what I believe to be its key strengths:</p>\n<ol>\n<li>Improve code readability</li>\n<li>Facilitate reproducible pipelines</li>\n<li>Enable faster iteration cycles</li>\n<li>Reduce the development-production gap</li>\n</ol>\n<p>To learn more about the design and the development of the framework, the <a href=\"https://multithreaded.stitchfix.com/blog/\" target=\"_blank\" rel=\"noopener noreferrer\">Stitch Fix’s engineering blog</a> is a gold mine.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"quick-introduction-to-hamilton\">Quick introduction to Hamilton<a href=\"https://tjean.me/blog/perks-of-hamilton#quick-introduction-to-hamilton\" class=\"hash-link\" aria-label=\"Direct link to Quick introduction to Hamilton\" title=\"Direct link to Quick introduction to Hamilton\">​</a></h2>\n<p>Hamilton relies on 3 main components: the <em>functions</em>, the <em>driver</em>, and the <em>desired outputs</em>.</p>\n<p><em>Functions</em> are your regular Python functions, but each needs to have a unique name and type annotated inputs and outputs, and be defined within a Python module (.py file).</p>\n<p>One or more modules are passed to the <em>driver</em> along a configuration object. The driver builds a DAG by linking a function’s arguments (named and annotated) to other functions’ name. At this point, no computation has happened yet.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-546b423881f98909147206416b8aa782.png\" width=\"1037\" height=\"682\" class=\"img_ev3q\"></p>\n<p>Finally, a list of <em>desired outputs</em>, which can be any node from the graph, is passed to the driver. When <em>executed</em>, the driver computes the desired output by running only the necessary functions. By default, Hamilton outputs pandas dataframe, but it can also return a dictionary containing arbitrary objects.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"suggested-development-workflow\">Suggested development workflow<a href=\"https://tjean.me/blog/perks-of-hamilton#suggested-development-workflow\" class=\"hash-link\" aria-label=\"Direct link to Suggested development workflow\" title=\"Direct link to Suggested development workflow\">​</a></h2>\n<p>My preferred development workflow relies on opening side-to-side a Python module and a Jupyter notebook with the <a href=\"https://ipython.org/ipython-doc/3/config/extensions/autoreload.html\" target=\"_blank\" rel=\"noopener noreferrer\">%autoreload ipython magic</a> configured (code snippet below). I write my data transformation in the module, and in the notebook, I instantiate a Hamilton driver and test the DAG with a small subset of data. Because of <code>%autoreload</code>, the module is reimported with the latest changes each time the Hamilton DAG is executed. This approach prevents out-of-order notebook executions, and functions always reside in clean .py files.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> hamilton</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">driver </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> Driver</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> my_module  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># data transformation module</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token operator\" style=\"color:#393A34\">%</span><span class=\"token plain\">load_ext autoreload   </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># load extension</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token operator\" style=\"color:#393A34\">%</span><span class=\"token plain\">autoreload </span><span class=\"token number\" style=\"color:#36acaa\">1</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># configure autoreload to only affect specified files</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token operator\" style=\"color:#393A34\">%</span><span class=\"token plain\">aimport my_module  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># specify my_module to be reloaded</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">hamilton_driver </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> Driver</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> my_module</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">hamilton_driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">execute</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">'desired_output1'</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">'desired_output2'</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"improve-code-readability\">Improve code readability<a href=\"https://tjean.me/blog/perks-of-hamilton#improve-code-readability\" class=\"hash-link\" aria-label=\"Direct link to Improve code readability\" title=\"Direct link to Improve code readability\">​</a></h2>\n<blockquote>\n<p>Zen of Python #7: Readability counts</p>\n</blockquote>\n<p>Code readability is multifaceted, but can be summarized to making code easy to understand for colleagues, reviewers, and your future self. You may think that your pandas operations are self-evident, or that writing a separate function for 1–3 lines of numpy code is overkill, <strong>but you’re likely wrong</strong>.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> pandas </span><span class=\"token keyword\" style=\"color:#00009f\">as</span><span class=\"token plain\"> pd</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">avg_3wk_spend</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">spend</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"Rolling 3 week average spend.\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> spend</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">rolling</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token number\" style=\"color:#36acaa\">3</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">mean</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:#d73a49\">spend_per_signup</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">spend</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> signups</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:#393A34\">-</span><span class=\"token operator\" style=\"color:#393A34\">&gt;</span><span class=\"token plain\"> pd</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">Series</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token triple-quoted-string string\" style=\"color:#e3116c\">\"\"\"The cost per signup in relation to spend.\"\"\"</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:#00009f\">return</span><span class=\"token plain\"> spend </span><span class=\"token operator\" style=\"color:#393A34\">/</span><span class=\"token plain\"> signups</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p>Simply by requiring unique function names and type annotations, Hamilton pushes developers to divide the pipeline into steps that each hold their own <strong>intent</strong>. It generates a <strong>semantic layer</strong> that is decoupled from the data transformation implementation. In the above example, the name <code>avg_3wk_spend</code> and the docstring communicate a clear intent compared to the pandas code <code>spend.rolling(3).mean()</code> (note that the time unit couldn’t be inferred!) Communicating the intent or the business purpose of a function helps understand the broader pipeline, but also allows collaborators to improve or replace a given implementation while preserving the intent.</p>\n<p>Breaking down complex functions into simpler single-purpose functions has many other benefits. For one, abstracting repetitive or redundant operations makes your code <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" target=\"_blank\" rel=\"noopener noreferrer\">DRY</a>-er and easier to unit test and debug. Also, meaningful results become more clearly separated from intermediary transformations. Utility functions to view the computation graph diagram can be helpful during the development process.</p>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-1-de0e4d5ca2f03b8c4b82906475014bb9.png\" width=\"1400\" height=\"685\" class=\"img_ev3q\"></p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"facilitate-reproducible-pipeline\">Facilitate reproducible pipeline<a href=\"https://tjean.me/blog/perks-of-hamilton#facilitate-reproducible-pipeline\" class=\"hash-link\" aria-label=\"Direct link to Facilitate reproducible pipeline\" title=\"Direct link to Facilitate reproducible pipeline\">​</a></h2>\n<p>Both in academia and in industry, data science and ML projects generate a myriad of results and artifacts. <em>Experiment tracking</em> typically refers to the systematic and organized tracking of those artifacts. It’s most often discussed in the context of ML training and hyperparameter optimization, leaving out data transformation pipelines despite their influence on the former.</p>\n<p>With Hamilton, the end-to-end transformations can be tracked from a few parameters. Since the Hamilton DAG is built in a deterministic manner, it doesn’t have to be logged; only the functions it’s built need to. No large artifacts have to be created! When running experiments with your favorite tool (MLFlow, Weights&amp;biases, etc.), simply log the Hamilton <strong>driver configuration</strong> and the <strong>Git SHA1</strong> of your python modules. To go a step further, you can store a <strong>picture of the executed DAG</strong> and track the <strong>package version</strong> in case of future behavior change.</p>\n<div class=\"language-python codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#393A34;--prism-background-color:#f6f8fa\"><div class=\"codeBlockContent_biex\"><pre tabindex=\"0\" class=\"prism-code language-python codeBlock_bY9V thin-scrollbar\" style=\"color:#393A34;background-color:#f6f8fa\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token keyword\" style=\"color:#00009f\">from</span><span class=\"token plain\"> hamilton</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">driver </span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> Driver</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> time_transform</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">import</span><span class=\"token plain\"> location_transform</span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:#00009f\">if</span><span class=\"token plain\"> __name__ </span><span class=\"token operator\" style=\"color:#393A34\">==</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"__main__\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    config </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> </span><span class=\"token builtin\">dict</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">connection</span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token string\" style=\"color:#e3116c\">\"database\"</span><span class=\"token punctuation\" style=\"color:#393A34\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\":memory:\"</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\">  </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># required driver config</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    hamilton_driver </span><span class=\"token operator\" style=\"color:#393A34\">=</span><span class=\"token plain\"> Driver</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token plain\">config</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> time_transform</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> location_transform</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\" style=\"display:inline-block\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># view the complete computation DAG</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    hamilton_driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">display_all_functions</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token string\" style=\"color:#e3116c\">\"./file.dot\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:#999988;font-style:italic\"># view only the path to the specified outputs</span><span class=\"token plain\"></span><br></span><span class=\"token-line\" style=\"color:#393A34\"><span class=\"token plain\">    hamilton_driver</span><span class=\"token punctuation\" style=\"color:#393A34\">.</span><span class=\"token plain\">visualize_execution</span><span class=\"token punctuation\" style=\"color:#393A34\">(</span><span class=\"token punctuation\" style=\"color:#393A34\">[</span><span class=\"token string\" style=\"color:#e3116c\">\"period_of_day\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"location_jump_speed\"</span><span class=\"token punctuation\" style=\"color:#393A34\">]</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:#e3116c\">\"./file.dot\"</span><span class=\"token punctuation\" style=\"color:#393A34\">,</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:#393A34\">{</span><span class=\"token punctuation\" style=\"color:#393A34\">}</span><span class=\"token punctuation\" style=\"color:#393A34\">)</span><br></span></code></pre><div class=\"buttonGroup__atx\"><button type=\"button\" aria-label=\"Copy code to clipboard\" title=\"Copy\" class=\"clean-btn\"><span class=\"copyButtonIcons_eSgA\" aria-hidden=\"true\"><svg viewBox=\"0 0 24 24\" class=\"copyButtonIcon_y97N\"><path fill=\"currentColor\" d=\"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\"></path></svg><svg viewBox=\"0 0 24 24\" class=\"copyButtonSuccessIcon_LjdS\"><path fill=\"currentColor\" d=\"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\"></path></svg></span></button></div></div></div>\n<p><img decoding=\"async\" loading=\"lazy\" alt=\"Alt text\" src=\"https://tjean.me/assets/images/image-2-98cbabbde819e68d86b0c6f9bd2ff376.png\" width=\"1400\" height=\"1111\" class=\"img_ev3q\"></p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"enable-faster-iteration-cycles\">Enable faster iteration cycles<a href=\"https://tjean.me/blog/perks-of-hamilton#enable-faster-iteration-cycles\" class=\"hash-link\" aria-label=\"Direct link to Enable faster iteration cycles\" title=\"Direct link to Enable faster iteration cycles\">​</a></h2>\n<p>Many “DAG-based” frameworks (Airflow, Metaflow, flyte, Prefect, etc.) are gaining traction in the data science and ML community. However, most are intended for orchestration, which is broader than the data transformation problem Hamilton aims to solve. It remains non-trivial to identify frameworks that align with your needs, have a simple, clear and well-documented API, require minimal <a href=\"https://en.wikipedia.org/wiki/Glue_code\" target=\"_blank\" rel=\"noopener noreferrer\">glue code</a>, and are easy to move away from.</p>\n<p>Orchestration frameworks rely on first defining processing steps, and then manually connecting them into a DAG. Connections have to be specified through decorators, classes, functions, or even YAML configuration files. Such approach imposes mental burden on data scientists and forces them to rewrite the DAG every time they want to investigate a new hypothesis. The problem only worsens as a project scales in complexity. Because this process is error-prone, a lot of time can be spent wrestling with the framework. Automatically building the DAG can lead to productivity improvements.</p>\n<p>Relying on regular Python functions, Hamilton requires minimal refactoring to get started (a <a href=\"https://hamilton-docs.gitbook.io/docs/best-practices/migrating-to-hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">robust migration</a> guide is available). This allows adopters to make “quick wins” and eases the onboarding of colleagues. For complex scenarios, powerful features are accessible through function <a href=\"https://hamilton-docs.gitbook.io/docs/reference/api-reference/available-decorators\" target=\"_blank\" rel=\"noopener noreferrer\">decorators</a>. In all cases, your code remains usable outside of Hamilton (minus the decorators).</p>\n<blockquote>\n<p><strong>Aside</strong>: On the opposite end of the spectrum, I worked with <a href=\"https://kedro.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">Kedro</a> which is a holistic and opinionated framework for data pipelines, and had a positive experience. It can feel restrictive at times, but the built-in conventions and the extensive set of tools it provides (i.e., configuration, versioning, tests, notebooks, etc.) does improve team productivity and solution robustness.</p>\n</blockquote>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"reduce-the-development-production-gap\">Reduce the development-production gap<a href=\"https://tjean.me/blog/perks-of-hamilton#reduce-the-development-production-gap\" class=\"hash-link\" aria-label=\"Direct link to Reduce the development-production gap\" title=\"Direct link to Reduce the development-production gap\">​</a></h2>\n<p>While Hamilton is a great framework for iterations, how does it fair in production? It might work for Stitch Fix, but can it handle my specific business use case? Is it computationally efficient? The TL;DR. is yes!</p>\n<p>In Hamilton, the driver receives the DAG instructions and later executes the computation. Originally, it relied on the pandas library to calculate new columns, which can <a href=\"https://pandas.pydata.org/docs/user_guide/scale.html\" target=\"_blank\" rel=\"noopener noreferrer\">become inefficient at scale</a>. An exciting addition was the release of <a href=\"https://multithreaded.stitchfix.com/blog/2022/02/22/scaling-hamilton/\" target=\"_blank\" rel=\"noopener noreferrer\">Spark, Dask, and Ray</a> drivers. Now, pandas data transformation can be executed by the Hamilton Dask driver and get the performance increase for free. It allows data scientists to define and test functions locally, and move to production without refactoring. What’s not to love!</p>\n<p>Recently, <a href=\"https://multithreaded.stitchfix.com/blog/2022/07/26/hamilton-data-quality/\" target=\"_blank\" rel=\"noopener noreferrer\">data validation</a> at the node level and support for the <a href=\"https://pandera.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">pandera</a> library (another great lightweight package!) were added. The development team is actively improving integration with open source tools. For advanced users, it’s possible to extend the framework’s standard interfaces (driver, decorator, result builder, etc.) to meet your requirements. People at Stitch Fix are very responsive and eager to help through <a href=\"https://github.com/stitchfix/hamilton/issues\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub issues</a> and their <a href=\"https://join.slack.com/t/hamilton-opensource/shared_invite/zt-1bjs72asx-wcUTgH7q7QX1igiQ5bbdcg\" target=\"_blank\" rel=\"noopener noreferrer\">Slack channel</a>.</p>\n<h2 class=\"anchor anchorWithStickyNavbar_LWe7\" id=\"conclusion\">Conclusion<a href=\"https://tjean.me/blog/perks-of-hamilton#conclusion\" class=\"hash-link\" aria-label=\"Direct link to Conclusion\" title=\"Direct link to Conclusion\">​</a></h2>\n<p>Hamilton is a great tool for data scientists and ML folks. I hope the overview provided convinced you to give it a try. You’re only <code>pip install sf-hamilton</code> away from getting started!</p>\n<p>References:</p>\n<ol>\n<li>Hamilton GitHub page (2022), <a href=\"https://github.com/stitchfix/hamilton\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/stitchfix/hamilton</a></li>\n<li>Stich Fix engineering blog (2022), <a href=\"https://multithreaded.stitchfix.com/engineering/\" target=\"_blank\" rel=\"noopener noreferrer\">https://multithreaded.stitchfix.com/engineering/</a></li>\n</ol>",
            "url": "https://tjean.me/blog/perks-of-hamilton",
            "title": "The perks of creating dataflows with Hamilton",
            "summary": "Hamilton is an open-source Python microframework developed at Stitch Fix. It automagically organizes Python functions into a directed acyclic graph (DAG) from their name and type annotations. It was originally created to facilitate working with tabular datasets containing hundreds of columns, but it’s general enough to enable many data science or machine learning (ML) scenarios.",
            "date_modified": "2022-08-08T00:00:00.000Z",
            "author": {
                "name": "Thierry Jean",
                "url": "https://github.com/zilto"
            },
            "tags": [
                "Hamilton"
            ]
        }
    ]
}