"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1424],{3882:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var t=n(5893),i=n(1151);const o={slug:"modular-llm",title:"Building a maintainable and modular LLM application stack with Hamilton",authors:"tj",tags:["Hamilton","vector search","OpenAI","Cohere","Weaviate","Pinecone","LanceDB"]},l=void 0,r={permalink:"/blog/modular-llm",source:"@site/blog/2023-07-11-modular-llm/index.md",title:"Building a maintainable and modular LLM application stack with Hamilton",description:"In this post, we\u2019re going to share how Hamilton can help you write modular and maintainable code for your large language model (LLM) application stack. Hamilton is great for describing any type of dataflow, which is exactly what you\u2019re doing when building an LLM powered application. With Hamilton you get strong software maintenance ergonomics, with the added benefit of being able to easily swap and evaluate different providers/implementations for components of your application.",date:"2023-07-11T00:00:00.000Z",tags:[{inline:!0,label:"Hamilton",permalink:"/blog/tags/hamilton"},{inline:!0,label:"vector search",permalink:"/blog/tags/vector-search"},{inline:!0,label:"OpenAI",permalink:"/blog/tags/open-ai"},{inline:!0,label:"Cohere",permalink:"/blog/tags/cohere"},{inline:!0,label:"Weaviate",permalink:"/blog/tags/weaviate"},{inline:!0,label:"Pinecone",permalink:"/blog/tags/pinecone"},{inline:!0,label:"LanceDB",permalink:"/blog/tags/lance-db"}],readingTime:17.535,hasTruncateMarker:!0,authors:[{name:"Thierry Jean",url:"https://github.com/zilto",imageURL:"https://github.com/zilto.png",key:"tj",page:null}],frontMatter:{slug:"modular-llm",title:"Building a maintainable and modular LLM application stack with Hamilton",authors:"tj",tags:["Hamilton","vector search","OpenAI","Cohere","Weaviate","Pinecone","LanceDB"]},unlisted:!1,prevItem:{title:"Simplify Prefect Workflow Creation and Maintenance with Hamilton",permalink:"/blog/prefect-hamilton"},nextItem:{title:"Simplify Airflow DAG Creation and Maintenance with Hamilton",permalink:"/blog/airflow-hamilton"}},s={authorsImageUrls:[void 0]},c=[];function m(e){const a={a:"a",blockquote:"blockquote",p:"p",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a.p,{children:["In this post, we\u2019re going to share how ",(0,t.jsx)(a.a,{href:"https://github.com/dagWorks-Inc/hamilton",children:"Hamilton"})," can help you write modular and maintainable code for your large language model (LLM) application stack. Hamilton is great for describing any type of ",(0,t.jsx)(a.a,{href:"https://en.wikipedia.org/wiki/Dataflow",children:"dataflow"}),", which is exactly what you\u2019re doing when building an LLM powered application. With Hamilton you get strong ",(0,t.jsx)(a.a,{href:"https://ceur-ws.org/Vol-3306/paper5.pdf",children:"software maintenance ergonomics"}),", with the added benefit of being able to easily swap and evaluate different providers/implementations for components of your application."]}),"\n",(0,t.jsxs)(a.blockquote,{children:["\n",(0,t.jsxs)(a.p,{children:["crosspost from ",(0,t.jsx)(a.a,{href:"https://blog.dagworks.io/p/building-a-maintainable-and-modular",children:"https://blog.dagworks.io/p/building-a-maintainable-and-modular"})]}),"\n"]})]})}function p(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},1151:(e,a,n)=>{n.d(a,{Z:()=>r,a:()=>l});var t=n(7294);const i={},o=t.createContext(i);function l(e){const a=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);