"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1193],{522:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>o});var t=n(5893),a=n(1151);const i={slug:"chess-glyph",title:"Chess Glyph",description:"Abstract chess game diagram."},l=void 0,r={id:"creative/chess-glyph",title:"Chess Glyph",description:"Abstract chess game diagram.",source:"@site/docs/creative/chess-glyph.md",sourceDirName:"creative",slug:"/creative/chess-glyph",permalink:"/personal_website/docs/creative/chess-glyph",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{slug:"chess-glyph",title:"Chess Glyph",description:"Abstract chess game diagram."},sidebar:"tutorialSidebar",previous:{title:"Creative",permalink:"/personal_website/docs/category/creative"},next:{title:"Subscape\xb2",permalink:"/personal_website/docs/creative/subscape"}},c={},o=[];function p(e){const s={code:"code",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["Visually represent any recorded chess game (",(0,t.jsx)(s.code,{children:"PGN"})," format). Sequences of moves can be displayed as traces and interactions (capture, check, piece, castleing, etc.) can be represented stylistically. The shapes and geometry are manipulated with ",(0,t.jsx)(s.code,{children:"shapely"}),". The code modularity allows to style the output with flexibility. Then, the page layout and the ",(0,t.jsx)(s.code,{children:".svg"})," files are created using ",(0,t.jsx)(s.code,{children:"vpype"})," and ",(0,t.jsx)(s.code,{children:"vsketch"}),". Finally, a few files were plotted using a Uunatek iDraw A4."]}),"\n",(0,t.jsxs)("div",{class:"flex",children:[(0,t.jsx)("div",{class:"w-1/2",children:(0,t.jsx)("img",{src:"/img/docs/chess_viz.jpg"})}),(0,t.jsx)("div",{class:"w-1/2",children:(0,t.jsx)("img",{src:"/img/docs/chess_viz2.jpg"})})]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",metastring:'title="Snippet of ChessVizSketch class"',children:'class ChessVizSketch(vsketch.SketchClass):\n    # Sketch parameters:\n    data_path = Path("./data/deepblue_kasparov_1997")\n    data_files = [x for x in data_path.iterdir() if x.is_file()]\n    games = file_parser("./data/Alekhine-Best-Games (1)/Alekhine Best Games.pgn")\n\n    scale = vsketch.Param(30)\n    top_margin = vsketch.Param(100)\n    left_margin = vsketch.Param(0)\n    vertical_spacing = vsketch.Param(300)\n    horizontal_spacing = vsketch.Param(300)\n    title_x = vsketch.Param(0)\n    title_y = vsketch.Param(0)\n    occlude = vsketch.Param(False)\n    \n\n    def draw(self, vsk: vsketch.Vsketch) -> None:\n        vsk.size("9inx12in", landscape=False, center=True)\n\n        layout = grid_layout(2, 3, self.horizontal_spacing, self.vertical_spacing)\n        \n        # display games\n        with vsk.pushMatrix():\n            vsk.translate(self.left_margin, self.top_margin)\n            for idx, pos in enumerate(layout[:5]):\n                with vsk.pushMatrix():\n                    vsk.translate(pos[0], pos[1])                   \n                    viz = ChessViz(self.games[idx])\n                    viz.generate_traces()\n                    lines, points, polygons = viz.get_shapes()\n\n                    for line in lines:\n                        line = affine_transform(line, [self.scale, 0, 0, self.scale, 0, 0])\n                        vsk.geometry(line)\n\n                    for point in points:\n                        point = affine_transform(point, [self.scale, 0, 0, self.scale, 0, 0])\n                        vsk.circle(point.x, point.y, radius=5)\n                        \n                    for poly in polygons:\n                        poly = affine_transform(poly, [self.scale, 0, 0, self.scale, 0, 0])\n                        vsk.geometry(poly)\n\n                    # display player names\n                    player_name(vsk, viz.metadata["Black"],\n                                x=pos[0] + self.left_margin + self.scale*3.5,\n                                y=pos[1] + self.top_margin - self.scale*0.6)\n                    player_name(vsk, viz.metadata["White"],\n                                x=pos[0] + self.left_margin + self.scale*3.5,\n                                y=pos[1] + self.top_margin + self.scale*7.6)                  \n                    \n                    # display results\n                    results(vsk, viz.metadata["Result"],\n                            x=pos[0] + self.left_margin + self.scale*3.5,\n                            y=pos[1] + self.top_margin + self.scale*8.3)\n\n        # display title\n        header(vsk, "Alexander Alekhine X", vsk.width/3.2, self.title_y)\n        subheader(vsk, viz.metadata["Site"], vsk.width/3.2, self.title_y+30)\n        subheader(vsk, viz.metadata["Date"][:4], vsk.width/3.2, self.title_y+60)\n        \n        if self.occlude:\n            vsk.vpype("occult")\n\n    def finalize(self, vsk: vsketch.Vsketch) -> None:\n        vsk.vpype("linesimplify occult linemerge linesort")\n\n\nif __name__ == "__main__":\n    ChessVizSketch.display()\n'})})]})}function d(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>r,a:()=>l});var t=n(7294);const a={},i=t.createContext(a);function l(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);