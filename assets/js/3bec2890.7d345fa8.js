"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5656],{6934:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>u});var i=t(5893),s=t(1151);const r={title:"PDF Summarizer"},a=void 0,o={id:"personal/pdf-summarizer",title:"PDF Summarizer",description:"Here's an extensible and production-ready PDF summarizer that you can run anywhere! The frontend uses streamlit, which communicates with a FastAPI backend powered by Hamilton. You give it a PDF file via the browser app and it returns you a text summary using the OpenAI API. If you want, you skip the browser inteface and directly access the /summarize endpoint with your document! Everything is containerized using Docker, so you should be able to run it where you please \ud83c\udfc3.",source:"@site/docs/personal/pdf-summarizer.md",sourceDirName:"personal",slug:"/personal/pdf-summarizer",permalink:"/docs/personal/pdf-summarizer",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"PDF Summarizer"},sidebar:"tutorialSidebar",previous:{title:"dev container",permalink:"/docs/personal/development-container"},next:{title:"Retrieval Augmented Generation",permalink:"/docs/personal/rag"}},l={},u=[{value:"Languages, Technology, and Tools",id:"languages-technology-and-tools",level:2}];function c(e){const n={a:"a",h2:"h2",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Here's an extensible and production-ready PDF summarizer that you can run anywhere! The frontend uses streamlit, which communicates with a FastAPI backend powered by Hamilton. You give it a PDF file via the browser app and it returns you a text summary using the OpenAI API. If you want, you skip the browser inteface and directly access the /summarize endpoint with your document! Everything is containerized using Docker, so you should be able to run it where you please \ud83c\udfc3."}),"\n",(0,i.jsx)(n.p,{children:"The ingestion and retrieval steps are implemented as dataflows with Hamilton and are exposed via FastAPI endpoints. The frontend is built with Streamlit and exposes the different functionalities via a simple web UI. Everything is packaged as containers with docker compose."}),"\n",(0,i.jsx)("img",{src:"/img/docs/summarize_dataflow.png"}),"\n",(0,i.jsx)(n.h2,{id:"languages-technology-and-tools",children:"Languages, Technology, and Tools"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Python"}),"\n",(0,i.jsx)(n.li,{children:"Hamilton"}),"\n",(0,i.jsx)(n.li,{children:"OpenAI API (ChatGPT)"}),"\n",(0,i.jsx)(n.li,{children:"Docker"}),"\n",(0,i.jsx)(n.li,{children:"Streamlit"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Blog post: ",(0,i.jsx)(n.a,{href:"https://blog.dagworks.io/publish/posts/detail/136158667",children:"https://blog.dagworks.io/publish/posts/detail/136158667"}),"\nCode: ",(0,i.jsx)(n.a,{href:"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/LLM_Workflows/pdf_summarizer",children:"https://github.com/DAGWorks-Inc/hamilton/tree/main/examples/LLM_Workflows/pdf_summarizer"})]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>a});var i=t(7294);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);